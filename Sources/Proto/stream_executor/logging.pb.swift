// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/stream_executor/logging.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct StreamExecutor_CudnnVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var major: Int32 = 0

  public var minor: Int32 = 0

  public var patch: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct StreamExecutor_ComputeCapability {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var major: Int32 = 0

  public var minor: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct StreamExecutor_CudaInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cudnnVersion: StreamExecutor_CudnnVersion {
    get {return _storage._cudnnVersion ?? StreamExecutor_CudnnVersion()}
    set {_uniqueStorage()._cudnnVersion = newValue}
  }
  /// Returns true if `cudnnVersion` has been explicitly set.
  public var hasCudnnVersion: Bool {return _storage._cudnnVersion != nil}
  /// Clears the value of `cudnnVersion`. Subsequent reads from it will return its default value.
  public mutating func clearCudnnVersion() {_uniqueStorage()._cudnnVersion = nil}

  public var computeCapability: StreamExecutor_ComputeCapability {
    get {return _storage._computeCapability ?? StreamExecutor_ComputeCapability()}
    set {_uniqueStorage()._computeCapability = newValue}
  }
  /// Returns true if `computeCapability` has been explicitly set.
  public var hasComputeCapability: Bool {return _storage._computeCapability != nil}
  /// Clears the value of `computeCapability`. Subsequent reads from it will return its default value.
  public mutating func clearComputeCapability() {_uniqueStorage()._computeCapability = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct StreamExecutor_ConvLogEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cudaInfo: StreamExecutor_CudaInfo {
    get {return _storage._cudaInfo ?? StreamExecutor_CudaInfo()}
    set {_uniqueStorage()._cudaInfo = newValue}
  }
  /// Returns true if `cudaInfo` has been explicitly set.
  public var hasCudaInfo: Bool {return _storage._cudaInfo != nil}
  /// Clears the value of `cudaInfo`. Subsequent reads from it will return its default value.
  public mutating func clearCudaInfo() {_uniqueStorage()._cudaInfo = nil}

  public var convolution: StreamExecutor_Dnn_ConvolutionProto {
    get {return _storage._convolution ?? StreamExecutor_Dnn_ConvolutionProto()}
    set {_uniqueStorage()._convolution = newValue}
  }
  /// Returns true if `convolution` has been explicitly set.
  public var hasConvolution: Bool {return _storage._convolution != nil}
  /// Clears the value of `convolution`. Subsequent reads from it will return its default value.
  public mutating func clearConvolution() {_uniqueStorage()._convolution = nil}

  /// Profiled time in ms. 0.0 if the convolution is not profiled.
  public var profileTimeMs: Float {
    get {return _storage._profileTimeMs}
    set {_uniqueStorage()._profileTimeMs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stream_executor"

extension StreamExecutor_CudnnVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CudnnVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "major"),
    2: .same(proto: "minor"),
    3: .same(proto: "patch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.major)
      case 2: try decoder.decodeSingularInt32Field(value: &self.minor)
      case 3: try decoder.decodeSingularInt32Field(value: &self.patch)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.major != 0 {
      try visitor.visitSingularInt32Field(value: self.major, fieldNumber: 1)
    }
    if self.minor != 0 {
      try visitor.visitSingularInt32Field(value: self.minor, fieldNumber: 2)
    }
    if self.patch != 0 {
      try visitor.visitSingularInt32Field(value: self.patch, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StreamExecutor_CudnnVersion, rhs: StreamExecutor_CudnnVersion) -> Bool {
    if lhs.major != rhs.major {return false}
    if lhs.minor != rhs.minor {return false}
    if lhs.patch != rhs.patch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamExecutor_ComputeCapability: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputeCapability"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "major"),
    2: .same(proto: "minor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.major)
      case 2: try decoder.decodeSingularInt32Field(value: &self.minor)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.major != 0 {
      try visitor.visitSingularInt32Field(value: self.major, fieldNumber: 1)
    }
    if self.minor != 0 {
      try visitor.visitSingularInt32Field(value: self.minor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StreamExecutor_ComputeCapability, rhs: StreamExecutor_ComputeCapability) -> Bool {
    if lhs.major != rhs.major {return false}
    if lhs.minor != rhs.minor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamExecutor_CudaInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CudaInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cudnn_version"),
    2: .standard(proto: "compute_capability"),
  ]

  fileprivate class _StorageClass {
    var _cudnnVersion: StreamExecutor_CudnnVersion? = nil
    var _computeCapability: StreamExecutor_ComputeCapability? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cudnnVersion = source._cudnnVersion
      _computeCapability = source._computeCapability
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cudnnVersion)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._computeCapability)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cudnnVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._computeCapability {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StreamExecutor_CudaInfo, rhs: StreamExecutor_CudaInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cudnnVersion != rhs_storage._cudnnVersion {return false}
        if _storage._computeCapability != rhs_storage._computeCapability {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamExecutor_ConvLogEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConvLogEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cuda_info"),
    2: .same(proto: "convolution"),
    3: .standard(proto: "profile_time_ms"),
  ]

  fileprivate class _StorageClass {
    var _cudaInfo: StreamExecutor_CudaInfo? = nil
    var _convolution: StreamExecutor_Dnn_ConvolutionProto? = nil
    var _profileTimeMs: Float = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cudaInfo = source._cudaInfo
      _convolution = source._convolution
      _profileTimeMs = source._profileTimeMs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cudaInfo)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._convolution)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._profileTimeMs)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cudaInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._convolution {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._profileTimeMs != 0 {
        try visitor.visitSingularFloatField(value: _storage._profileTimeMs, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StreamExecutor_ConvLogEntry, rhs: StreamExecutor_ConvLogEntry) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cudaInfo != rhs_storage._cudaInfo {return false}
        if _storage._convolution != rhs_storage._convolution {return false}
        if _storage._profileTimeMs != rhs_storage._profileTimeMs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
