// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/compiler/xrt/xrt.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Xrt_DeviceAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// As many ComputationDevice as many there are computations (number
  /// of cores per replica).
  public var computationDevices: [Xrt_DeviceAssignment.ComputationDevice] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct ComputationDevice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// As many replicas as there are in the replicated computation.
    public var replicaDevices: [Xrt_DeviceAssignment.ComputationDevice.DeviceMeshCoordinates] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct DeviceMeshCoordinates {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The mesh coordinates for the device. Usually (X, Y, Core), in the order
      /// in which they are returned in the TopologyProto.
      ///  X    = value(0)
      ///  Y    = value(1)
      ///  Core = value(2)
      public var value: [Int32] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}
}

/// Options for an XLA compilation.
public struct Xrt_XLAComputationConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The number of replicas the computation will be run on. If this is
  /// default (0) it is interpreted as 1.
  public var numReplicas: Int32 {
    get {return _storage._numReplicas}
    set {_uniqueStorage()._numReplicas = newValue}
  }

  /// The number of "model-parallel" cores per replica. If this is
  /// default (0) it is interpreted as 1.
  public var numCoresPerReplica: Int32 {
    get {return _storage._numCoresPerReplica}
    set {_uniqueStorage()._numCoresPerReplica = newValue}
  }

  /// Optional metadata about host sends and recvs.
  public var hostComputeMetadata: Tensorflow_Tf2xla_HostComputeMetadata {
    get {return _storage._hostComputeMetadata ?? Tensorflow_Tf2xla_HostComputeMetadata()}
    set {_uniqueStorage()._hostComputeMetadata = newValue}
  }
  /// Returns true if `hostComputeMetadata` has been explicitly set.
  public var hasHostComputeMetadata: Bool {return _storage._hostComputeMetadata != nil}
  /// Clears the value of `hostComputeMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearHostComputeMetadata() {_uniqueStorage()._hostComputeMetadata = nil}

  /// The arg/result shapes for the whole computation.
  public var programShape: Xla_ProgramShapeProto {
    get {return _storage._programShape ?? Xla_ProgramShapeProto()}
    set {_uniqueStorage()._programShape = newValue}
  }
  /// Returns true if `programShape` has been explicitly set.
  public var hasProgramShape: Bool {return _storage._programShape != nil}
  /// Clears the value of `programShape`. Subsequent reads from it will return its default value.
  public mutating func clearProgramShape() {_uniqueStorage()._programShape = nil}

  /// The arg/result shapes for each core of a model-parallel
  /// computation. per_core_args_and_result_shapes is optional for a
  /// single-core computation.
  public var perCoreProgramShape: [Xla_ProgramShapeProto] {
    get {return _storage._perCoreProgramShape}
    set {_uniqueStorage()._perCoreProgramShape = newValue}
  }

  /// Describes how replicated computation instances should be assigned to
  /// devices. There are num_cores_per_replica computations, and each one will be
  /// sent and executed to the set of replica device numbers described in the
  /// DeviceAssignment proto.
  public var deviceAssignment: Xrt_DeviceAssignment {
    get {return _storage._deviceAssignment ?? Xrt_DeviceAssignment()}
    set {_uniqueStorage()._deviceAssignment = newValue}
  }
  /// Returns true if `deviceAssignment` has been explicitly set.
  public var hasDeviceAssignment: Bool {return _storage._deviceAssignment != nil}
  /// Clears the value of `deviceAssignment`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceAssignment() {_uniqueStorage()._deviceAssignment = nil}

  /// The debugging options to be passed to the XLA compilation process.
  public var debugOptions: Xla_DebugOptions {
    get {return _storage._debugOptions ?? Xla_DebugOptions()}
    set {_uniqueStorage()._debugOptions = newValue}
  }
  /// Returns true if `debugOptions` has been explicitly set.
  public var hasDebugOptions: Bool {return _storage._debugOptions != nil}
  /// Clears the value of `debugOptions`. Subsequent reads from it will return its default value.
  public mutating func clearDebugOptions() {_uniqueStorage()._debugOptions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Options and XLA computation for a compilation.
public struct Xrt_XLAComputation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var config: Xrt_XLAComputationConfig {
    get {return _storage._config ?? Xrt_XLAComputationConfig()}
    set {_uniqueStorage()._config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {return _storage._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {_uniqueStorage()._config = nil}

  public var hloSnapshot: Xla_HloSnapshot {
    get {return _storage._hloSnapshot ?? Xla_HloSnapshot()}
    set {_uniqueStorage()._hloSnapshot = newValue}
  }
  /// Returns true if `hloSnapshot` has been explicitly set.
  public var hasHloSnapshot: Bool {return _storage._hloSnapshot != nil}
  /// Clears the value of `hloSnapshot`. Subsequent reads from it will return its default value.
  public mutating func clearHloSnapshot() {_uniqueStorage()._hloSnapshot = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Literal to allocate space for, and transfer to, device memory.
public struct Xrt_XLAAllocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Xla_LiteralProto {
    get {return _storage._value ?? Xla_LiteralProto()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_uniqueStorage()._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Node in a tree describing a tuple constructed from input handles. A
/// node is an internal node if tuples is non-empty, in which case
/// input_index and release_input_handle are ignored. Otherwise a node
/// is a leaf node. Each leaf XLATupleNode is the index of an input
/// which corresponds to a handle that will be grafted onto the output
/// tuple at that location. If release_input_handle is true that input
/// handle will be released and become invalid.  Inputs may be repeated
/// in which case leaves of the output tuple will alias. If an input is
/// repeated, release_input_handle must be false for every leaf where
/// that input appears.
///
/// For example, if input 0 has shape {} and input 1 has shape {2,3}
/// then the XLATupleNode with structure {1,{0,1}} corresponds to a
/// tuple with shape {{2,3},{{},{2,3}}}.
public struct Xrt_XLATupleNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inputIndex: Int32 = 0

  public var releaseInputHandle: Bool = false

  public var tuples: [Xrt_XLATupleNode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Options for an XLA execution.
public struct Xrt_XRTExecutionConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Local device to run on. This is present because the execute Op
  /// may be placed on a device such as CPU or TPU_SYSTEM that
  /// logically manages multiple cores.
  public var deviceOrdinal: Int32 = 0

  /// Which model-parallel computation to run from the compiled bundle.
  public var coreIndexInReplica: Int32 = 0

  /// Optional key to disambiguate between executions. This is only
  /// needed if multiple host send/recvs may be outstanding
  /// concurrently with executions.
  public var executionInstanceKey: String = String()

  /// If non-zero, rng_seed to reset the core with.
  public var rngSeed: UInt32 = 0

  /// If true, release allocation handles on the inputs after running.
  public var releaseInputHandles: Bool = false

  /// If true, release the handle to the computation after running.
  public var releaseCompilationHandle: Bool = false

  /// If set to true, and the result shape is a tuple, then instead of returning
  /// a single tuple allocation the execution will return a vector of
  /// allocations, one for each of the first-level elements of the result tuple.
  public var returnExplodedTuple: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xrt"

extension Xrt_DeviceAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "computation_devices"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.computationDevices)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.computationDevices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.computationDevices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_DeviceAssignment, rhs: Xrt_DeviceAssignment) -> Bool {
    if lhs.computationDevices != rhs.computationDevices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xrt_DeviceAssignment.ComputationDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xrt_DeviceAssignment.protoMessageName + ".ComputationDevice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "replica_devices"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.replicaDevices)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.replicaDevices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.replicaDevices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_DeviceAssignment.ComputationDevice, rhs: Xrt_DeviceAssignment.ComputationDevice) -> Bool {
    if lhs.replicaDevices != rhs.replicaDevices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xrt_DeviceAssignment.ComputationDevice.DeviceMeshCoordinates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xrt_DeviceAssignment.ComputationDevice.protoMessageName + ".DeviceMeshCoordinates"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitPackedInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_DeviceAssignment.ComputationDevice.DeviceMeshCoordinates, rhs: Xrt_DeviceAssignment.ComputationDevice.DeviceMeshCoordinates) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xrt_XLAComputationConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XLAComputationConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_replicas"),
    2: .standard(proto: "num_cores_per_replica"),
    3: .standard(proto: "host_compute_metadata"),
    4: .standard(proto: "program_shape"),
    5: .standard(proto: "per_core_program_shape"),
    6: .standard(proto: "device_assignment"),
    7: .standard(proto: "debug_options"),
  ]

  fileprivate class _StorageClass {
    var _numReplicas: Int32 = 0
    var _numCoresPerReplica: Int32 = 0
    var _hostComputeMetadata: Tensorflow_Tf2xla_HostComputeMetadata? = nil
    var _programShape: Xla_ProgramShapeProto? = nil
    var _perCoreProgramShape: [Xla_ProgramShapeProto] = []
    var _deviceAssignment: Xrt_DeviceAssignment? = nil
    var _debugOptions: Xla_DebugOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _numReplicas = source._numReplicas
      _numCoresPerReplica = source._numCoresPerReplica
      _hostComputeMetadata = source._hostComputeMetadata
      _programShape = source._programShape
      _perCoreProgramShape = source._perCoreProgramShape
      _deviceAssignment = source._deviceAssignment
      _debugOptions = source._debugOptions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._numReplicas)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._numCoresPerReplica)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._hostComputeMetadata)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._programShape)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._perCoreProgramShape)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._deviceAssignment)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._debugOptions)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._numReplicas != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numReplicas, fieldNumber: 1)
      }
      if _storage._numCoresPerReplica != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numCoresPerReplica, fieldNumber: 2)
      }
      if let v = _storage._hostComputeMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._programShape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._perCoreProgramShape.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._perCoreProgramShape, fieldNumber: 5)
      }
      if let v = _storage._deviceAssignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._debugOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_XLAComputationConfig, rhs: Xrt_XLAComputationConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._numReplicas != rhs_storage._numReplicas {return false}
        if _storage._numCoresPerReplica != rhs_storage._numCoresPerReplica {return false}
        if _storage._hostComputeMetadata != rhs_storage._hostComputeMetadata {return false}
        if _storage._programShape != rhs_storage._programShape {return false}
        if _storage._perCoreProgramShape != rhs_storage._perCoreProgramShape {return false}
        if _storage._deviceAssignment != rhs_storage._deviceAssignment {return false}
        if _storage._debugOptions != rhs_storage._debugOptions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xrt_XLAComputation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XLAComputation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .standard(proto: "hlo_snapshot"),
  ]

  fileprivate class _StorageClass {
    var _config: Xrt_XLAComputationConfig? = nil
    var _hloSnapshot: Xla_HloSnapshot? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _config = source._config
      _hloSnapshot = source._hloSnapshot
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._config)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._hloSnapshot)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._config {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._hloSnapshot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_XLAComputation, rhs: Xrt_XLAComputation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._config != rhs_storage._config {return false}
        if _storage._hloSnapshot != rhs_storage._hloSnapshot {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xrt_XLAAllocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XLAAllocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _value: Xla_LiteralProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_XLAAllocation, rhs: Xrt_XLAAllocation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xrt_XLATupleNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XLATupleNode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_index"),
    2: .standard(proto: "release_input_handle"),
    3: .same(proto: "tuples"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.inputIndex)
      case 2: try decoder.decodeSingularBoolField(value: &self.releaseInputHandle)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.tuples)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.inputIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.inputIndex, fieldNumber: 1)
    }
    if self.releaseInputHandle != false {
      try visitor.visitSingularBoolField(value: self.releaseInputHandle, fieldNumber: 2)
    }
    if !self.tuples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tuples, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_XLATupleNode, rhs: Xrt_XLATupleNode) -> Bool {
    if lhs.inputIndex != rhs.inputIndex {return false}
    if lhs.releaseInputHandle != rhs.releaseInputHandle {return false}
    if lhs.tuples != rhs.tuples {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xrt_XRTExecutionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XRTExecutionConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_ordinal"),
    2: .standard(proto: "core_index_in_replica"),
    3: .standard(proto: "execution_instance_key"),
    4: .standard(proto: "rng_seed"),
    5: .standard(proto: "release_input_handles"),
    6: .standard(proto: "release_compilation_handle"),
    7: .standard(proto: "return_exploded_tuple"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.deviceOrdinal)
      case 2: try decoder.decodeSingularInt32Field(value: &self.coreIndexInReplica)
      case 3: try decoder.decodeSingularStringField(value: &self.executionInstanceKey)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.rngSeed)
      case 5: try decoder.decodeSingularBoolField(value: &self.releaseInputHandles)
      case 6: try decoder.decodeSingularBoolField(value: &self.releaseCompilationHandle)
      case 7: try decoder.decodeSingularBoolField(value: &self.returnExplodedTuple)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deviceOrdinal != 0 {
      try visitor.visitSingularInt32Field(value: self.deviceOrdinal, fieldNumber: 1)
    }
    if self.coreIndexInReplica != 0 {
      try visitor.visitSingularInt32Field(value: self.coreIndexInReplica, fieldNumber: 2)
    }
    if !self.executionInstanceKey.isEmpty {
      try visitor.visitSingularStringField(value: self.executionInstanceKey, fieldNumber: 3)
    }
    if self.rngSeed != 0 {
      try visitor.visitSingularUInt32Field(value: self.rngSeed, fieldNumber: 4)
    }
    if self.releaseInputHandles != false {
      try visitor.visitSingularBoolField(value: self.releaseInputHandles, fieldNumber: 5)
    }
    if self.releaseCompilationHandle != false {
      try visitor.visitSingularBoolField(value: self.releaseCompilationHandle, fieldNumber: 6)
    }
    if self.returnExplodedTuple != false {
      try visitor.visitSingularBoolField(value: self.returnExplodedTuple, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xrt_XRTExecutionConfig, rhs: Xrt_XRTExecutionConfig) -> Bool {
    if lhs.deviceOrdinal != rhs.deviceOrdinal {return false}
    if lhs.coreIndexInReplica != rhs.coreIndexInReplica {return false}
    if lhs.executionInstanceKey != rhs.executionInstanceKey {return false}
    if lhs.rngSeed != rhs.rngSeed {return false}
    if lhs.releaseInputHandles != rhs.releaseInputHandles {return false}
    if lhs.releaseCompilationHandle != rhs.releaseCompilationHandle {return false}
    if lhs.returnExplodedTuple != rhs.returnExplodedTuple {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
