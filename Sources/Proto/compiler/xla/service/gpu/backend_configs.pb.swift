// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/compiler/xla/service/gpu/backend_configs.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Backend config for a convolution that runs through cudnn.
public struct Xla_Gpu_CudnnConvBackendConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Opaque algorithm number of cudnn algorithm chosen for this conv.
  public var algorithm: Int64 = 0

  /// Whether we may use tensor cores when running this conv.  Even if this is
  /// true, cudnn may choose not to use tensor cores, e.g. because the GPU or
  /// selected algorithm doesn't support it.
  public var tensorOpsEnabled: Bool = false

  /// The scaling factor multiplied with the convolution result.
  public var convResultScale: Double = 0

  /// The requested activation (e.g. relu) after the convolution. It is with type
  /// stream_executor::dnn::ActivationMode.
  public var activationMode: Int64 = 0

  /// The scaling factor multiplied with the side input. If no side input buffer
  /// is provided, this field must be 0.
  public var sideInputScale: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xla.gpu"

extension Xla_Gpu_CudnnConvBackendConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CudnnConvBackendConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "algorithm"),
    2: .standard(proto: "tensor_ops_enabled"),
    4: .standard(proto: "conv_result_scale"),
    3: .standard(proto: "activation_mode"),
    5: .standard(proto: "side_input_scale"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.algorithm)
      case 2: try decoder.decodeSingularBoolField(value: &self.tensorOpsEnabled)
      case 3: try decoder.decodeSingularInt64Field(value: &self.activationMode)
      case 4: try decoder.decodeSingularDoubleField(value: &self.convResultScale)
      case 5: try decoder.decodeSingularDoubleField(value: &self.sideInputScale)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.algorithm != 0 {
      try visitor.visitSingularInt64Field(value: self.algorithm, fieldNumber: 1)
    }
    if self.tensorOpsEnabled != false {
      try visitor.visitSingularBoolField(value: self.tensorOpsEnabled, fieldNumber: 2)
    }
    if self.activationMode != 0 {
      try visitor.visitSingularInt64Field(value: self.activationMode, fieldNumber: 3)
    }
    if self.convResultScale != 0 {
      try visitor.visitSingularDoubleField(value: self.convResultScale, fieldNumber: 4)
    }
    if self.sideInputScale != 0 {
      try visitor.visitSingularDoubleField(value: self.sideInputScale, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_Gpu_CudnnConvBackendConfig, rhs: Xla_Gpu_CudnnConvBackendConfig) -> Bool {
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs.tensorOpsEnabled != rhs.tensorOpsEnabled {return false}
    if lhs.convResultScale != rhs.convResultScale {return false}
    if lhs.activationMode != rhs.activationMode {return false}
    if lhs.sideInputScale != rhs.sideInputScale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
