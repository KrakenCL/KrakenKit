// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/compiler/xla/xla.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Options for the HLO insert-reduce-precision-operations pass.
public struct Xla_HloReducePrecisionOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var location: Xla_HloReducePrecisionOptions.Location = .opInputs

  /// Exponent and mantissa bit counts for the reduced precision.
  public var exponentBits: UInt32 = 0

  public var mantissaBits: UInt32 = 0

  /// Operations matching these opcodes should be suffixed with reduce-precision
  /// operations.
  public var opcodesToSuffix: [UInt32] = []

  /// Operations with names containing these substrings should be suffixed with
  /// reduce-precision operations.
  public var opnameSubstringsToSuffix: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Where and when the reduce-precision operations will be added.
  public enum Location: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Add reduce-precision operations to the inputs of selected instructions.
    /// This is done before any optimization occurs.
    case opInputs // = 0

    /// Add reduce-precision operations to the outputs of selected instructions.
    /// This is done before any optimization occurs.
    case opOutputs // = 1

    /// After operation-fusion occurs, add reduce-precision operations to the
    /// outputs of any selected instructions that have not been fused into
    /// fusion instructions.
    case unfusedOpOutputs // = 2

    /// After operation-fusion occurs, add reduce-precision operations to the
    /// outputs of any fusion instructions that contain operations matching the
    /// selection criteria.
    case fusionInputsByContent // = 3

    /// After operation-fusion occurs, add reduce-precision operations to the
    /// outputs of any fusion instructions that contain operations matching the
    /// selection criteria.
    case fusionOutputsByContent // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .opInputs
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .opInputs
      case 1: self = .opOutputs
      case 2: self = .unfusedOpOutputs
      case 3: self = .fusionInputsByContent
      case 4: self = .fusionOutputsByContent
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .opInputs: return 0
      case .opOutputs: return 1
      case .unfusedOpOutputs: return 2
      case .fusionInputsByContent: return 3
      case .fusionOutputsByContent: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Xla_HloReducePrecisionOptions.Location: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Xla_HloReducePrecisionOptions.Location] = [
    .opInputs,
    .opOutputs,
    .unfusedOpOutputs,
    .fusionInputsByContent,
    .fusionOutputsByContent,
  ]
}

#endif  // swift(>=4.2)

/// Debugging options for XLA. These options may change at any time - there are
/// no guarantees about backward or forward compatibility for these fields.
public struct Xla_DebugOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// HLO modules matching this regex will be dumped to a .dot file throughout
  /// various stages in compilation (file names are LOG(INFO)'d). Set to ".*" to
  /// dump *all* HLO modules.
  public var xlaGenerateHloGraph: String {
    get {return _storage._xlaGenerateHloGraph}
    set {_uniqueStorage()._xlaGenerateHloGraph = newValue}
  }

  /// Show addresses of HLO ops in graph dump.
  public var xlaHloGraphAddresses: Bool {
    get {return _storage._xlaHloGraphAddresses}
    set {_uniqueStorage()._xlaHloGraphAddresses = newValue}
  }

  /// Path to dump HLO graphs to.
  public var xlaHloGraphPath: String {
    get {return _storage._xlaHloGraphPath}
    set {_uniqueStorage()._xlaHloGraphPath = newValue}
  }

  /// Dump HLO graphs as TensorFlow GraphDefs.
  public var xlaHloDumpAsGraphdef: Bool {
    get {return _storage._xlaHloDumpAsGraphdef}
    set {_uniqueStorage()._xlaHloDumpAsGraphdef = newValue}
  }

  /// HLO modules matching this regex will be dumped to LOG(INFO). Set to ".*" to
  /// dump *all* HLO modules.
  public var xlaLogHloText: String {
    get {return _storage._xlaLogHloText}
    set {_uniqueStorage()._xlaLogHloText = newValue}
  }

  /// Dump all HLO modules as text into the provided directory path.
  public var xlaGenerateHloTextTo: String {
    get {return _storage._xlaGenerateHloTextTo}
    set {_uniqueStorage()._xlaGenerateHloTextTo = newValue}
  }

  /// Dump Hlo after all hlo passes are executed as proto binary into this
  /// directory.
  public var xlaDumpOptimizedHloProtoTo: String {
    get {return _storage._xlaDumpOptimizedHloProtoTo}
    set {_uniqueStorage()._xlaDumpOptimizedHloProtoTo = newValue}
  }

  /// Instrument the computation to collect per-HLO cycle counts.
  public var xlaHloProfile: Bool {
    get {return _storage._xlaHloProfile}
    set {_uniqueStorage()._xlaHloProfile = newValue}
  }

  /// Dumps computations that XLA executes into the provided directory path.
  public var xlaDumpComputationsTo: String {
    get {return _storage._xlaDumpComputationsTo}
    set {_uniqueStorage()._xlaDumpComputationsTo = newValue}
  }

  /// Dumps parameters and results of computations that XLA executes into the
  /// provided directory path.
  public var xlaDumpExecutionsTo: String {
    get {return _storage._xlaDumpExecutionsTo}
    set {_uniqueStorage()._xlaDumpExecutionsTo = newValue}
  }

  /// List of HLO passes to disable. These names must exactly match the pass
  /// names as specified by the HloPassInterface::name() method.
  public var xlaDisableHloPasses: [String] {
    get {return _storage._xlaDisableHloPasses}
    set {_uniqueStorage()._xlaDisableHloPasses = newValue}
  }

  /// Disables all HLO passes.  Notes that some passes are necessary for
  /// correctness and the invariants that must be satisfied by "fully optimized"
  /// HLO are different for different devices and may change over time.  The only
  /// "guarantee", such as it is, is that if you compile XLA and dump the
  /// optimized HLO for some graph, you should be able to run it again on the
  /// same device with the same build of XLA.
  public var xlaDisableAllHloPasses: Bool {
    get {return _storage._xlaDisableAllHloPasses}
    set {_uniqueStorage()._xlaDisableAllHloPasses = newValue}
  }

  /// Numerical optimization level for the XLA compiler backend; the specific
  /// interpretation of this value is left to the backends.
  public var xlaBackendOptimizationLevel: Int32 {
    get {return _storage._xlaBackendOptimizationLevel}
    set {_uniqueStorage()._xlaBackendOptimizationLevel = newValue}
  }

  /// Embed the compiler IR as a string in the executable.
  public var xlaEmbedIrInExecutable: Bool {
    get {return _storage._xlaEmbedIrInExecutable}
    set {_uniqueStorage()._xlaEmbedIrInExecutable = newValue}
  }

  /// Dump the compiler IR into this directory as individual files.
  public var xlaDumpIrTo: String {
    get {return _storage._xlaDumpIrTo}
    set {_uniqueStorage()._xlaDumpIrTo = newValue}
  }

  /// Eliminate implicit broadcasts when lowering user computations to HLO
  /// instructions; use explicit broadcast instead.
  public var xlaEliminateHloImplicitBroadcast: Bool {
    get {return _storage._xlaEliminateHloImplicitBroadcast}
    set {_uniqueStorage()._xlaEliminateHloImplicitBroadcast = newValue}
  }

  /// When generating calls to Eigen in the CPU backend, use multi-threaded Eigen
  /// mode.
  public var xlaCpuMultiThreadEigen: Bool {
    get {return _storage._xlaCpuMultiThreadEigen}
    set {_uniqueStorage()._xlaCpuMultiThreadEigen = newValue}
  }

  /// Path to directory with cuda/ptx tools and libraries.
  public var xlaGpuCudaDataDir: String {
    get {return _storage._xlaGpuCudaDataDir}
    set {_uniqueStorage()._xlaGpuCudaDataDir = newValue}
  }

  /// Enable flush-to-zero semantics in the GPU backend.
  public var xlaGpuFtz: Bool {
    get {return _storage._xlaGpuFtz}
    set {_uniqueStorage()._xlaGpuFtz = newValue}
  }

  /// Disable multi-streaming in the GPU backend.
  public var xlaGpuDisableMultiStreaming: Bool {
    get {return _storage._xlaGpuDisableMultiStreaming}
    set {_uniqueStorage()._xlaGpuDisableMultiStreaming = newValue}
  }

  /// If true, in LLVM-based backends, emit !alias.scope metadata in
  /// generated IR.
  public var xlaLlvmEnableAliasScopeMetadata: Bool {
    get {return _storage._xlaLlvmEnableAliasScopeMetadata}
    set {_uniqueStorage()._xlaLlvmEnableAliasScopeMetadata = newValue}
  }

  /// If true, in LLVM-based backends, emit !noalias metadata in the
  /// generated IR.
  public var xlaLlvmEnableNoaliasMetadata: Bool {
    get {return _storage._xlaLlvmEnableNoaliasMetadata}
    set {_uniqueStorage()._xlaLlvmEnableNoaliasMetadata = newValue}
  }

  /// If true, in LLVM-based backends, emit !invariant.load metadata in
  /// the generated IR.
  public var xlaLlvmEnableInvariantLoadMetadata: Bool {
    get {return _storage._xlaLlvmEnableInvariantLoadMetadata}
    set {_uniqueStorage()._xlaLlvmEnableInvariantLoadMetadata = newValue}
  }

  /// If true, a set of expensive LLVM optimization passes will not be run.
  public var xlaLlvmDisableExpensivePasses: Bool {
    get {return _storage._xlaLlvmDisableExpensivePasses}
    set {_uniqueStorage()._xlaLlvmDisableExpensivePasses = newValue}
  }

  /// Options for inserting reduce-precision operations for numerical
  /// experimentation.  This is a repeated field, as we may want to have
  /// multiple passes with different parameters.
  public var hloReducePrecisionOptions: [Xla_HloReducePrecisionOptions] {
    get {return _storage._hloReducePrecisionOptions}
    set {_uniqueStorage()._hloReducePrecisionOptions = newValue}
  }

  /// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
  /// computation will run n! times with all permunations of layouts for the
  /// output shape in rank n. For example, with a 3D shape, all permutations of
  /// the set {0, 1, 2} are tried.
  public var xlaTestAllOutputLayouts: Bool {
    get {return _storage._xlaTestAllOutputLayouts}
    set {_uniqueStorage()._xlaTestAllOutputLayouts = newValue}
  }

  /// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
  /// computation will run for all permunations of layouts of all input
  /// arguments. For example, with 2 input arguments in 2D and 4D shapes, the
  /// computation will run 2! * 4! times.
  public var xlaTestAllInputLayouts: Bool {
    get {return _storage._xlaTestAllInputLayouts}
    set {_uniqueStorage()._xlaTestAllInputLayouts = newValue}
  }

  /// Assign colors based on sharding information when generating the Graphviz
  /// HLO graph.
  public var xlaHloGraphShardingColor: Bool {
    get {return _storage._xlaHloGraphShardingColor}
    set {_uniqueStorage()._xlaHloGraphShardingColor = newValue}
  }

  /// Prefix the name scopes of the TF graph exports with "devX" device
  /// assignments, if available.
  public var xlaHloTfgraphDeviceScopes: Bool {
    get {return _storage._xlaHloTfgraphDeviceScopes}
    set {_uniqueStorage()._xlaHloTfgraphDeviceScopes = newValue}
  }

  /// If true, the GPU backend is free to use cudnn for HLO batch normalization
  /// ops.
  public var xlaGpuUseCudnnBatchnorm: Bool {
    get {return _storage._xlaGpuUseCudnnBatchnorm}
    set {_uniqueStorage()._xlaGpuUseCudnnBatchnorm = newValue}
  }

  /// Dump HLO before any hlo passes are executed as proto binary into this
  /// directory.
  public var xlaDumpUnoptimizedHloProtoTo: String {
    get {return _storage._xlaDumpUnoptimizedHloProtoTo}
    set {_uniqueStorage()._xlaDumpUnoptimizedHloProtoTo = newValue}
  }

  /// Dump HLO after each pass as an HloProto in binary file format into this
  /// directory.
  public var xlaDumpPerPassHloProtoTo: String {
    get {return _storage._xlaDumpPerPassHloProtoTo}
    set {_uniqueStorage()._xlaDumpPerPassHloProtoTo = newValue}
  }

  /// Generate calls to MKL-DNN in the CPU backend.
  public var xlaCpuUseMklDnn: Bool {
    get {return _storage._xlaCpuUseMklDnn}
    set {_uniqueStorage()._xlaCpuUseMklDnn = newValue}
  }

  /// Maximum kernel unroll factor for the GPU backend.
  public var xlaGpuMaxKernelUnrollFactor: Int32 {
    get {return _storage._xlaGpuMaxKernelUnrollFactor}
    set {_uniqueStorage()._xlaGpuMaxKernelUnrollFactor = newValue}
  }

  /// When true, "unsafe" mathematical optimizations are enabled. These
  /// transformations include but are not limited to:
  ///
  ///  - Reducing the precision of operations (e.g. using an approximate sin
  ///    function, or transforming x/y into x * (1/y)).
  ///  - Assuming that operations never produce or consume NaN or +/- Inf.
  ///  - Assuming that +0 and -0 are indistinguishable.
  public var xlaCpuEnableFastMath: Bool {
    get {return _storage._xlaCpuEnableFastMath}
    set {_uniqueStorage()._xlaCpuEnableFastMath = newValue}
  }

  /// When true we lower the Minimum and Maximum hlos in the GPU backend such
  /// that Min(NotNaN, NaN) = Min(NaN, NotNaN) = NotNaN.  In other words, if flag
  /// this is true we don't propagate NaNs through Min and Max.
  public var xlaGpuEnableFastMinMax: Bool {
    get {return _storage._xlaGpuEnableFastMinMax}
    set {_uniqueStorage()._xlaGpuEnableFastMinMax = newValue}
  }

  /// Crashes the program when any kind of verification fails, instead of just
  /// logging the failures. One example is cross checking of convolution results
  /// among different algorithms.
  public var xlaGpuCrashOnVerificationFailures: Bool {
    get {return _storage._xlaGpuCrashOnVerificationFailures}
    set {_uniqueStorage()._xlaGpuCrashOnVerificationFailures = newValue}
  }

  /// Force the host platform to pretend that there are these many host
  /// "devices".  All these devices are backed by the same threadpool.  Defaults
  /// to 1.
  ///
  /// Setting this to anything other than 1 can increase overhead from context
  /// switching but we let the user override this behavior to help run tests on
  /// the host that run models in parallel across multiple devices.
  public var xlaForceHostPlatformDeviceCount: Int32 {
    get {return _storage._xlaForceHostPlatformDeviceCount}
    set {_uniqueStorage()._xlaForceHostPlatformDeviceCount = newValue}
  }

  /// If set to true XLA:GPU invokes `ptxas` with -O0 (default is -O3).
  public var xlaGpuDisablePtxasOptimizations: Bool {
    get {return _storage._xlaGpuDisablePtxasOptimizations}
    set {_uniqueStorage()._xlaGpuDisablePtxasOptimizations = newValue}
  }

  /// Dump HLO graphs as an HTML (DOT -> SVG inlined in HTML)
  public var xlaHloDumpAsHtml: Bool {
    get {return _storage._xlaHloDumpAsHtml}
    set {_uniqueStorage()._xlaHloDumpAsHtml = newValue}
  }

  /// Enable fast math with eigen in the HLO evaluator.
  public var xlaHloEvaluatorUseFastPath: Bool {
    get {return _storage._xlaHloEvaluatorUseFastPath}
    set {_uniqueStorage()._xlaHloEvaluatorUseFastPath = newValue}
  }

  /// Temporary option to allow support for both the R1 and the scalar index
  /// versions of DynamicSlice and DynamicUpdateSlice. Only used for testing.
  public var xlaAllowScalarIndexDynamicOps: Bool {
    get {return _storage._xlaAllowScalarIndexDynamicOps}
    set {_uniqueStorage()._xlaAllowScalarIndexDynamicOps = newValue}
  }

  /// Extra options to pass to the compilation backend (e.g. LLVM); specific
  /// interpretation of these values is left to the backend.
  public var xlaBackendExtraOptions: Dictionary<String,String> {
    get {return _storage._xlaBackendExtraOptions}
    set {_uniqueStorage()._xlaBackendExtraOptions = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// These settings control how XLA compiles and/or runs code.  Not all settings
/// will have an effect on every platform.
///
/// When adding new fields, keep in mind that boolean fields default to false.
public struct Xla_ExecutionOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This optional field's layout is used as a hint when storing the output of
  /// this computation.  Subsequent transfers of this output array to the client
  /// may be faster when using this layout.
  ///
  /// We use a Shape here to accommodate computations that return a tuple.
  public var shapeWithOutputLayout: Xla_ShapeProto {
    get {return _storage._shapeWithOutputLayout ?? Xla_ShapeProto()}
    set {_uniqueStorage()._shapeWithOutputLayout = newValue}
  }
  /// Returns true if `shapeWithOutputLayout` has been explicitly set.
  public var hasShapeWithOutputLayout: Bool {return _storage._shapeWithOutputLayout != nil}
  /// Clears the value of `shapeWithOutputLayout`. Subsequent reads from it will return its default value.
  public mutating func clearShapeWithOutputLayout() {_uniqueStorage()._shapeWithOutputLayout = nil}

  /// Used to seed random-number generators used in this computation.  If this is
  /// 0, we generate a seed ourselves.
  ///
  /// TODO(b/32083678): Changing the seed unnecessarily forces a recompilation.
  public var seed: UInt64 {
    get {return _storage._seed}
    set {_uniqueStorage()._seed = newValue}
  }

  public var debugOptions: Xla_DebugOptions {
    get {return _storage._debugOptions ?? Xla_DebugOptions()}
    set {_uniqueStorage()._debugOptions = newValue}
  }
  /// Returns true if `debugOptions` has been explicitly set.
  public var hasDebugOptions: Bool {return _storage._debugOptions != nil}
  /// Clears the value of `debugOptions`. Subsequent reads from it will return its default value.
  public mutating func clearDebugOptions() {_uniqueStorage()._debugOptions = nil}

  /// This optional field specifies a particular set of devices to run the
  /// computation on. The computation will be partitioned across these devices.
  /// If not provided, the default device will be chosen.
  public var deviceHandles: [Xla_DeviceHandle] {
    get {return _storage._deviceHandles}
    set {_uniqueStorage()._deviceHandles = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_GetDeviceHandlesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceCount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_GetDeviceHandlesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceHandles: [Xla_DeviceHandle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_TransferToClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  /// This optional field directs the service to return the literal in this
  /// layout. A shape is used to hold the layout to accommodate tuples.
  public var shapeWithLayout: Xla_ShapeProto {
    get {return _storage._shapeWithLayout ?? Xla_ShapeProto()}
    set {_uniqueStorage()._shapeWithLayout = newValue}
  }
  /// Returns true if `shapeWithLayout` has been explicitly set.
  public var hasShapeWithLayout: Bool {return _storage._shapeWithLayout != nil}
  /// Clears the value of `shapeWithLayout`. Subsequent reads from it will return its default value.
  public mutating func clearShapeWithLayout() {_uniqueStorage()._shapeWithLayout = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_TransferToClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var literal: Xla_LiteralProto {
    get {return _storage._literal ?? Xla_LiteralProto()}
    set {_uniqueStorage()._literal = newValue}
  }
  /// Returns true if `literal` has been explicitly set.
  public var hasLiteral: Bool {return _storage._literal != nil}
  /// Clears the value of `literal`. Subsequent reads from it will return its default value.
  public mutating func clearLiteral() {_uniqueStorage()._literal = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_TransferToServerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var literal: Xla_LiteralProto {
    get {return _storage._literal ?? Xla_LiteralProto()}
    set {_uniqueStorage()._literal = newValue}
  }
  /// Returns true if `literal` has been explicitly set.
  public var hasLiteral: Bool {return _storage._literal != nil}
  /// Clears the value of `literal`. Subsequent reads from it will return its default value.
  public mutating func clearLiteral() {_uniqueStorage()._literal = nil}

  public var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  /// Returns true if `deviceHandle` has been explicitly set.
  public var hasDeviceHandle: Bool {return _storage._deviceHandle != nil}
  /// Clears the value of `deviceHandle`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceHandle() {_uniqueStorage()._deviceHandle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_TransferToServerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_TransferToInfeedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var literal: Xla_LiteralProto {
    get {return _storage._literal ?? Xla_LiteralProto()}
    set {_uniqueStorage()._literal = newValue}
  }
  /// Returns true if `literal` has been explicitly set.
  public var hasLiteral: Bool {return _storage._literal != nil}
  /// Clears the value of `literal`. Subsequent reads from it will return its default value.
  public mutating func clearLiteral() {_uniqueStorage()._literal = nil}

  public var replicaID: Int64 {
    get {return _storage._replicaID}
    set {_uniqueStorage()._replicaID = newValue}
  }

  public var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  /// Returns true if `deviceHandle` has been explicitly set.
  public var hasDeviceHandle: Bool {return _storage._deviceHandle != nil}
  /// Clears the value of `deviceHandle`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceHandle() {_uniqueStorage()._deviceHandle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_TransferToInfeedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_TransferFromOutfeedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This optional field directs the service to return the literal in this
  /// layout. A shape is used to hold the layout to accommodate tuples.
  public var shapeWithLayout: Xla_ShapeProto {
    get {return _storage._shapeWithLayout ?? Xla_ShapeProto()}
    set {_uniqueStorage()._shapeWithLayout = newValue}
  }
  /// Returns true if `shapeWithLayout` has been explicitly set.
  public var hasShapeWithLayout: Bool {return _storage._shapeWithLayout != nil}
  /// Clears the value of `shapeWithLayout`. Subsequent reads from it will return its default value.
  public mutating func clearShapeWithLayout() {_uniqueStorage()._shapeWithLayout = nil}

  public var replicaID: Int64 {
    get {return _storage._replicaID}
    set {_uniqueStorage()._replicaID = newValue}
  }

  public var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  /// Returns true if `deviceHandle` has been explicitly set.
  public var hasDeviceHandle: Bool {return _storage._deviceHandle != nil}
  /// Clears the value of `deviceHandle`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceHandle() {_uniqueStorage()._deviceHandle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_TransferFromOutfeedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var literal: Xla_LiteralProto {
    get {return _storage._literal ?? Xla_LiteralProto()}
    set {_uniqueStorage()._literal = newValue}
  }
  /// Returns true if `literal` has been explicitly set.
  public var hasLiteral: Bool {return _storage._literal != nil}
  /// Clears the value of `literal`. Subsequent reads from it will return its default value.
  public mutating func clearLiteral() {_uniqueStorage()._literal = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ResetDeviceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceHandle: Xla_DeviceHandle {
    get {return _storage._deviceHandle ?? Xla_DeviceHandle()}
    set {_uniqueStorage()._deviceHandle = newValue}
  }
  /// Returns true if `deviceHandle` has been explicitly set.
  public var hasDeviceHandle: Bool {return _storage._deviceHandle != nil}
  /// Clears the value of `deviceHandle`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceHandle() {_uniqueStorage()._deviceHandle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ResetDeviceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_ComputationGraphStatsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var computation: Xla_HloModuleProto {
    get {return _storage._computation ?? Xla_HloModuleProto()}
    set {_uniqueStorage()._computation = newValue}
  }
  /// Returns true if `computation` has been explicitly set.
  public var hasComputation: Bool {return _storage._computation != nil}
  /// Clears the value of `computation`. Subsequent reads from it will return its default value.
  public mutating func clearComputation() {_uniqueStorage()._computation = nil}

  public var debugOptions: Xla_DebugOptions {
    get {return _storage._debugOptions ?? Xla_DebugOptions()}
    set {_uniqueStorage()._debugOptions = newValue}
  }
  /// Returns true if `debugOptions` has been explicitly set.
  public var hasDebugOptions: Bool {return _storage._debugOptions != nil}
  /// Clears the value of `debugOptions`. Subsequent reads from it will return its default value.
  public mutating func clearDebugOptions() {_uniqueStorage()._debugOptions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ComputationStatsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stats: Xla_ComputationStats {
    get {return _storage._stats ?? Xla_ComputationStats()}
    set {_uniqueStorage()._stats = newValue}
  }
  /// Returns true if `stats` has been explicitly set.
  public var hasStats: Bool {return _storage._stats != nil}
  /// Clears the value of `stats`. Subsequent reads from it will return its default value.
  public mutating func clearStats() {_uniqueStorage()._stats = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_CreateChannelHandleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var channelType: Xla_ChannelHandle.ChannelType = .invalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_CreateChannelHandleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var channel: Xla_ChannelHandle {
    get {return _storage._channel ?? Xla_ChannelHandle()}
    set {_uniqueStorage()._channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  public var hasChannel: Bool {return _storage._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  public mutating func clearChannel() {_uniqueStorage()._channel = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_UnregisterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Xla_GlobalDataHandle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_UnregisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_CompileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The graph to be compiled.
  public var computation: Xla_HloModuleProto {
    get {return _storage._computation ?? Xla_HloModuleProto()}
    set {_uniqueStorage()._computation = newValue}
  }
  /// Returns true if `computation` has been explicitly set.
  public var hasComputation: Bool {return _storage._computation != nil}
  /// Clears the value of `computation`. Subsequent reads from it will return its default value.
  public mutating func clearComputation() {_uniqueStorage()._computation = nil}

  /// Options that affect how XLA compiles code to service this request.
  public var executionOptions: Xla_ExecutionOptions {
    get {return _storage._executionOptions ?? Xla_ExecutionOptions()}
    set {_uniqueStorage()._executionOptions = newValue}
  }
  /// Returns true if `executionOptions` has been explicitly set.
  public var hasExecutionOptions: Bool {return _storage._executionOptions != nil}
  /// Clears the value of `executionOptions`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionOptions() {_uniqueStorage()._executionOptions = nil}

  /// The layouts of the input arguments. If not set, the default layout will be
  /// used. Although the real arguments are not needed in compilation, the
  /// layouts of the arguments can affect the compilation.
  public var inputShapeWithLayout: [Xla_ShapeProto] {
    get {return _storage._inputShapeWithLayout}
    set {_uniqueStorage()._inputShapeWithLayout = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_CompileResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The handle to the executable.
  public var handle: Xla_ExecutionHandle {
    get {return _storage._handle ?? Xla_ExecutionHandle()}
    set {_uniqueStorage()._handle = newValue}
  }
  /// Returns true if `handle` has been explicitly set.
  public var hasHandle: Bool {return _storage._handle != nil}
  /// Clears the value of `handle`. Subsequent reads from it will return its default value.
  public mutating func clearHandle() {_uniqueStorage()._handle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ExecuteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var handle: Xla_ExecutionHandle {
    get {return _storage._handle ?? Xla_ExecutionHandle()}
    set {_uniqueStorage()._handle = newValue}
  }
  /// Returns true if `handle` has been explicitly set.
  public var hasHandle: Bool {return _storage._handle != nil}
  /// Clears the value of `handle`. Subsequent reads from it will return its default value.
  public mutating func clearHandle() {_uniqueStorage()._handle = nil}

  /// The shape and layout of the arguments must be the same as the those of the
  /// executable's parameters.
  public var arguments: [Xla_GlobalDataHandle] {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TODO(b/118493728): Remove this and ExecuteGraphParallelRequest and replace
/// the uses with calls to Compile and Execute.
public struct Xla_ExecuteGraphRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var computation: Xla_HloModuleProto {
    get {return _storage._computation ?? Xla_HloModuleProto()}
    set {_uniqueStorage()._computation = newValue}
  }
  /// Returns true if `computation` has been explicitly set.
  public var hasComputation: Bool {return _storage._computation != nil}
  /// Clears the value of `computation`. Subsequent reads from it will return its default value.
  public mutating func clearComputation() {_uniqueStorage()._computation = nil}

  public var arguments: [Xla_GlobalDataHandle] {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  /// Options that affect how XLA compiles and runs code to service this request.
  public var executionOptions: Xla_ExecutionOptions {
    get {return _storage._executionOptions ?? Xla_ExecutionOptions()}
    set {_uniqueStorage()._executionOptions = newValue}
  }
  /// Returns true if `executionOptions` has been explicitly set.
  public var hasExecutionOptions: Bool {return _storage._executionOptions != nil}
  /// Clears the value of `executionOptions`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionOptions() {_uniqueStorage()._executionOptions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ExecuteGraphParallelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var requests: [Xla_ExecuteGraphRequest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_ExecuteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var output: Xla_GlobalDataHandle {
    get {return _storage._output ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._output = newValue}
  }
  /// Returns true if `output` has been explicitly set.
  public var hasOutput: Bool {return _storage._output != nil}
  /// Clears the value of `output`. Subsequent reads from it will return its default value.
  public mutating func clearOutput() {_uniqueStorage()._output = nil}

  public var profile: Xla_ExecutionProfile {
    get {return _storage._profile ?? Xla_ExecutionProfile()}
    set {_uniqueStorage()._profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  public var hasProfile: Bool {return _storage._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  public mutating func clearProfile() {_uniqueStorage()._profile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ExecuteParallelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responses: [Xla_ExecuteResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_WaitForExecutionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var execution: Xla_ExecutionHandle {
    get {return _storage._execution ?? Xla_ExecutionHandle()}
    set {_uniqueStorage()._execution = newValue}
  }
  /// Returns true if `execution` has been explicitly set.
  public var hasExecution: Bool {return _storage._execution != nil}
  /// Clears the value of `execution`. Subsequent reads from it will return its default value.
  public mutating func clearExecution() {_uniqueStorage()._execution = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_WaitForExecutionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var output: Xla_GlobalDataHandle {
    get {return _storage._output ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._output = newValue}
  }
  /// Returns true if `output` has been explicitly set.
  public var hasOutput: Bool {return _storage._output != nil}
  /// Clears the value of `output`. Subsequent reads from it will return its default value.
  public mutating func clearOutput() {_uniqueStorage()._output = nil}

  public var profile: Xla_ExecutionProfile {
    get {return _storage._profile ?? Xla_ExecutionProfile()}
    set {_uniqueStorage()._profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  public var hasProfile: Bool {return _storage._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  public mutating func clearProfile() {_uniqueStorage()._profile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ComputeConstantGraphRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var computation: Xla_HloModuleProto {
    get {return _storage._computation ?? Xla_HloModuleProto()}
    set {_uniqueStorage()._computation = newValue}
  }
  /// Returns true if `computation` has been explicitly set.
  public var hasComputation: Bool {return _storage._computation != nil}
  /// Clears the value of `computation`. Subsequent reads from it will return its default value.
  public mutating func clearComputation() {_uniqueStorage()._computation = nil}

  public var outputLayout: Xla_LayoutProto {
    get {return _storage._outputLayout ?? Xla_LayoutProto()}
    set {_uniqueStorage()._outputLayout = newValue}
  }
  /// Returns true if `outputLayout` has been explicitly set.
  public var hasOutputLayout: Bool {return _storage._outputLayout != nil}
  /// Clears the value of `outputLayout`. Subsequent reads from it will return its default value.
  public mutating func clearOutputLayout() {_uniqueStorage()._outputLayout = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_ComputeConstantResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A LiteralProto is returned directly for this request.
  public var literal: Xla_LiteralProto {
    get {return _storage._literal ?? Xla_LiteralProto()}
    set {_uniqueStorage()._literal = newValue}
  }
  /// Returns true if `literal` has been explicitly set.
  public var hasLiteral: Bool {return _storage._literal != nil}
  /// Clears the value of `literal`. Subsequent reads from it will return its default value.
  public mutating func clearLiteral() {_uniqueStorage()._literal = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_DeconstructTupleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tupleHandle: Xla_GlobalDataHandle {
    get {return _storage._tupleHandle ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._tupleHandle = newValue}
  }
  /// Returns true if `tupleHandle` has been explicitly set.
  public var hasTupleHandle: Bool {return _storage._tupleHandle != nil}
  /// Clears the value of `tupleHandle`. Subsequent reads from it will return its default value.
  public mutating func clearTupleHandle() {_uniqueStorage()._tupleHandle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_DeconstructTupleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var elementHandles: [Xla_GlobalDataHandle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Xla_LoadDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Describes the path of the ColumnIO tablet to load.
  public var columnioTabletPath: String {
    get {return _storage._columnioTabletPath}
    set {_uniqueStorage()._columnioTabletPath = newValue}
  }

  /// Describes the field to load within the ColumnIO tablet.
  public var columnioField: String {
    get {return _storage._columnioField}
    set {_uniqueStorage()._columnioField = newValue}
  }

  /// Individual element shape, excluding rows.
  public var elementShape: Xla_ShapeProto {
    get {return _storage._elementShape ?? Xla_ShapeProto()}
    set {_uniqueStorage()._elementShape = newValue}
  }
  /// Returns true if `elementShape` has been explicitly set.
  public var hasElementShape: Bool {return _storage._elementShape != nil}
  /// Clears the value of `elementShape`. Subsequent reads from it will return its default value.
  public mutating func clearElementShape() {_uniqueStorage()._elementShape = nil}

  /// Warning: ColumnIO does not support random-access, so use offset with
  /// caution in performance-critical scenarios.
  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  /// Maximum number of elements (with shape element_shape) to load.
  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  /// If more than one item is requested (via limit > 1), then this request
  /// attribute zips together the produced vectors.
  public var zip: Bool {
    get {return _storage._zip}
    set {_uniqueStorage()._zip = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_LoadDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var dataShape: Xla_ShapeProto {
    get {return _storage._dataShape ?? Xla_ShapeProto()}
    set {_uniqueStorage()._dataShape = newValue}
  }
  /// Returns true if `dataShape` has been explicitly set.
  public var hasDataShape: Bool {return _storage._dataShape != nil}
  /// Clears the value of `dataShape`. Subsequent reads from it will return its default value.
  public mutating func clearDataShape() {_uniqueStorage()._dataShape = nil}

  public var availableRows: Int64 {
    get {return _storage._availableRows}
    set {_uniqueStorage()._availableRows = newValue}
  }

  public var rowsLoaded: Int64 {
    get {return _storage._rowsLoaded}
    set {_uniqueStorage()._rowsLoaded = newValue}
  }

  public var nanoseconds: Int64 {
    get {return _storage._nanoseconds}
    set {_uniqueStorage()._nanoseconds = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_GetShapeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_GetShapeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var shape: Xla_ShapeProto {
    get {return _storage._shape ?? Xla_ShapeProto()}
    set {_uniqueStorage()._shape = newValue}
  }
  /// Returns true if `shape` has been explicitly set.
  public var hasShape: Bool {return _storage._shape != nil}
  /// Clears the value of `shape`. Subsequent reads from it will return its default value.
  public mutating func clearShape() {_uniqueStorage()._shape = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_UnpackRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Xla_GlobalDataHandle {
    get {return _storage._data ?? Xla_GlobalDataHandle()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Xla_UnpackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tiedData: [Xla_GlobalDataHandle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xla"

extension Xla_HloReducePrecisionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HloReducePrecisionOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .standard(proto: "exponent_bits"),
    3: .standard(proto: "mantissa_bits"),
    4: .standard(proto: "opcodes_to_suffix"),
    5: .standard(proto: "opname_substrings_to_suffix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.location)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.exponentBits)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.mantissaBits)
      case 4: try decoder.decodeRepeatedUInt32Field(value: &self.opcodesToSuffix)
      case 5: try decoder.decodeRepeatedStringField(value: &self.opnameSubstringsToSuffix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.location != .opInputs {
      try visitor.visitSingularEnumField(value: self.location, fieldNumber: 1)
    }
    if self.exponentBits != 0 {
      try visitor.visitSingularUInt32Field(value: self.exponentBits, fieldNumber: 2)
    }
    if self.mantissaBits != 0 {
      try visitor.visitSingularUInt32Field(value: self.mantissaBits, fieldNumber: 3)
    }
    if !self.opcodesToSuffix.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.opcodesToSuffix, fieldNumber: 4)
    }
    if !self.opnameSubstringsToSuffix.isEmpty {
      try visitor.visitRepeatedStringField(value: self.opnameSubstringsToSuffix, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_HloReducePrecisionOptions, rhs: Xla_HloReducePrecisionOptions) -> Bool {
    if lhs.location != rhs.location {return false}
    if lhs.exponentBits != rhs.exponentBits {return false}
    if lhs.mantissaBits != rhs.mantissaBits {return false}
    if lhs.opcodesToSuffix != rhs.opcodesToSuffix {return false}
    if lhs.opnameSubstringsToSuffix != rhs.opnameSubstringsToSuffix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_HloReducePrecisionOptions.Location: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OP_INPUTS"),
    1: .same(proto: "OP_OUTPUTS"),
    2: .same(proto: "UNFUSED_OP_OUTPUTS"),
    3: .same(proto: "FUSION_INPUTS_BY_CONTENT"),
    4: .same(proto: "FUSION_OUTPUTS_BY_CONTENT"),
  ]
}

extension Xla_DebugOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DebugOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "xla_generate_hlo_graph"),
    2: .standard(proto: "xla_hlo_graph_addresses"),
    4: .standard(proto: "xla_hlo_graph_path"),
    5: .standard(proto: "xla_hlo_dump_as_graphdef"),
    6: .standard(proto: "xla_log_hlo_text"),
    7: .standard(proto: "xla_generate_hlo_text_to"),
    8: .standard(proto: "xla_dump_optimized_hlo_proto_to"),
    9: .standard(proto: "xla_hlo_profile"),
    10: .standard(proto: "xla_dump_computations_to"),
    11: .standard(proto: "xla_dump_executions_to"),
    30: .standard(proto: "xla_disable_hlo_passes"),
    104: .standard(proto: "xla_disable_all_hlo_passes"),
    31: .standard(proto: "xla_backend_optimization_level"),
    33: .standard(proto: "xla_embed_ir_in_executable"),
    34: .standard(proto: "xla_dump_ir_to"),
    35: .standard(proto: "xla_eliminate_hlo_implicit_broadcast"),
    60: .standard(proto: "xla_cpu_multi_thread_eigen"),
    61: .standard(proto: "xla_gpu_cuda_data_dir"),
    62: .standard(proto: "xla_gpu_ftz"),
    63: .standard(proto: "xla_gpu_disable_multi_streaming"),
    70: .standard(proto: "xla_llvm_enable_alias_scope_metadata"),
    71: .standard(proto: "xla_llvm_enable_noalias_metadata"),
    72: .standard(proto: "xla_llvm_enable_invariant_load_metadata"),
    73: .standard(proto: "xla_llvm_disable_expensive_passes"),
    80: .standard(proto: "hlo_reduce_precision_options"),
    90: .standard(proto: "xla_test_all_output_layouts"),
    91: .standard(proto: "xla_test_all_input_layouts"),
    92: .standard(proto: "xla_hlo_graph_sharding_color"),
    93: .standard(proto: "xla_hlo_tfgraph_device_scopes"),
    94: .standard(proto: "xla_gpu_use_cudnn_batchnorm"),
    95: .standard(proto: "xla_dump_unoptimized_hlo_proto_to"),
    96: .standard(proto: "xla_dump_per_pass_hlo_proto_to"),
    97: .standard(proto: "xla_cpu_use_mkl_dnn"),
    98: .standard(proto: "xla_gpu_max_kernel_unroll_factor"),
    99: .standard(proto: "xla_cpu_enable_fast_math"),
    100: .standard(proto: "xla_gpu_enable_fast_min_max"),
    101: .standard(proto: "xla_gpu_crash_on_verification_failures"),
    102: .standard(proto: "xla_force_host_platform_device_count"),
    103: .standard(proto: "xla_gpu_disable_ptxas_optimizations"),
    105: .standard(proto: "xla_hlo_dump_as_html"),
    106: .standard(proto: "xla_hlo_evaluator_use_fast_path"),
    107: .standard(proto: "xla_allow_scalar_index_dynamic_ops"),
    500: .standard(proto: "xla_backend_extra_options"),
  ]

  fileprivate class _StorageClass {
    var _xlaGenerateHloGraph: String = String()
    var _xlaHloGraphAddresses: Bool = false
    var _xlaHloGraphPath: String = String()
    var _xlaHloDumpAsGraphdef: Bool = false
    var _xlaLogHloText: String = String()
    var _xlaGenerateHloTextTo: String = String()
    var _xlaDumpOptimizedHloProtoTo: String = String()
    var _xlaHloProfile: Bool = false
    var _xlaDumpComputationsTo: String = String()
    var _xlaDumpExecutionsTo: String = String()
    var _xlaDisableHloPasses: [String] = []
    var _xlaDisableAllHloPasses: Bool = false
    var _xlaBackendOptimizationLevel: Int32 = 0
    var _xlaEmbedIrInExecutable: Bool = false
    var _xlaDumpIrTo: String = String()
    var _xlaEliminateHloImplicitBroadcast: Bool = false
    var _xlaCpuMultiThreadEigen: Bool = false
    var _xlaGpuCudaDataDir: String = String()
    var _xlaGpuFtz: Bool = false
    var _xlaGpuDisableMultiStreaming: Bool = false
    var _xlaLlvmEnableAliasScopeMetadata: Bool = false
    var _xlaLlvmEnableNoaliasMetadata: Bool = false
    var _xlaLlvmEnableInvariantLoadMetadata: Bool = false
    var _xlaLlvmDisableExpensivePasses: Bool = false
    var _hloReducePrecisionOptions: [Xla_HloReducePrecisionOptions] = []
    var _xlaTestAllOutputLayouts: Bool = false
    var _xlaTestAllInputLayouts: Bool = false
    var _xlaHloGraphShardingColor: Bool = false
    var _xlaHloTfgraphDeviceScopes: Bool = false
    var _xlaGpuUseCudnnBatchnorm: Bool = false
    var _xlaDumpUnoptimizedHloProtoTo: String = String()
    var _xlaDumpPerPassHloProtoTo: String = String()
    var _xlaCpuUseMklDnn: Bool = false
    var _xlaGpuMaxKernelUnrollFactor: Int32 = 0
    var _xlaCpuEnableFastMath: Bool = false
    var _xlaGpuEnableFastMinMax: Bool = false
    var _xlaGpuCrashOnVerificationFailures: Bool = false
    var _xlaForceHostPlatformDeviceCount: Int32 = 0
    var _xlaGpuDisablePtxasOptimizations: Bool = false
    var _xlaHloDumpAsHtml: Bool = false
    var _xlaHloEvaluatorUseFastPath: Bool = false
    var _xlaAllowScalarIndexDynamicOps: Bool = false
    var _xlaBackendExtraOptions: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _xlaGenerateHloGraph = source._xlaGenerateHloGraph
      _xlaHloGraphAddresses = source._xlaHloGraphAddresses
      _xlaHloGraphPath = source._xlaHloGraphPath
      _xlaHloDumpAsGraphdef = source._xlaHloDumpAsGraphdef
      _xlaLogHloText = source._xlaLogHloText
      _xlaGenerateHloTextTo = source._xlaGenerateHloTextTo
      _xlaDumpOptimizedHloProtoTo = source._xlaDumpOptimizedHloProtoTo
      _xlaHloProfile = source._xlaHloProfile
      _xlaDumpComputationsTo = source._xlaDumpComputationsTo
      _xlaDumpExecutionsTo = source._xlaDumpExecutionsTo
      _xlaDisableHloPasses = source._xlaDisableHloPasses
      _xlaDisableAllHloPasses = source._xlaDisableAllHloPasses
      _xlaBackendOptimizationLevel = source._xlaBackendOptimizationLevel
      _xlaEmbedIrInExecutable = source._xlaEmbedIrInExecutable
      _xlaDumpIrTo = source._xlaDumpIrTo
      _xlaEliminateHloImplicitBroadcast = source._xlaEliminateHloImplicitBroadcast
      _xlaCpuMultiThreadEigen = source._xlaCpuMultiThreadEigen
      _xlaGpuCudaDataDir = source._xlaGpuCudaDataDir
      _xlaGpuFtz = source._xlaGpuFtz
      _xlaGpuDisableMultiStreaming = source._xlaGpuDisableMultiStreaming
      _xlaLlvmEnableAliasScopeMetadata = source._xlaLlvmEnableAliasScopeMetadata
      _xlaLlvmEnableNoaliasMetadata = source._xlaLlvmEnableNoaliasMetadata
      _xlaLlvmEnableInvariantLoadMetadata = source._xlaLlvmEnableInvariantLoadMetadata
      _xlaLlvmDisableExpensivePasses = source._xlaLlvmDisableExpensivePasses
      _hloReducePrecisionOptions = source._hloReducePrecisionOptions
      _xlaTestAllOutputLayouts = source._xlaTestAllOutputLayouts
      _xlaTestAllInputLayouts = source._xlaTestAllInputLayouts
      _xlaHloGraphShardingColor = source._xlaHloGraphShardingColor
      _xlaHloTfgraphDeviceScopes = source._xlaHloTfgraphDeviceScopes
      _xlaGpuUseCudnnBatchnorm = source._xlaGpuUseCudnnBatchnorm
      _xlaDumpUnoptimizedHloProtoTo = source._xlaDumpUnoptimizedHloProtoTo
      _xlaDumpPerPassHloProtoTo = source._xlaDumpPerPassHloProtoTo
      _xlaCpuUseMklDnn = source._xlaCpuUseMklDnn
      _xlaGpuMaxKernelUnrollFactor = source._xlaGpuMaxKernelUnrollFactor
      _xlaCpuEnableFastMath = source._xlaCpuEnableFastMath
      _xlaGpuEnableFastMinMax = source._xlaGpuEnableFastMinMax
      _xlaGpuCrashOnVerificationFailures = source._xlaGpuCrashOnVerificationFailures
      _xlaForceHostPlatformDeviceCount = source._xlaForceHostPlatformDeviceCount
      _xlaGpuDisablePtxasOptimizations = source._xlaGpuDisablePtxasOptimizations
      _xlaHloDumpAsHtml = source._xlaHloDumpAsHtml
      _xlaHloEvaluatorUseFastPath = source._xlaHloEvaluatorUseFastPath
      _xlaAllowScalarIndexDynamicOps = source._xlaAllowScalarIndexDynamicOps
      _xlaBackendExtraOptions = source._xlaBackendExtraOptions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._xlaGenerateHloGraph)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._xlaHloGraphAddresses)
        case 4: try decoder.decodeSingularStringField(value: &_storage._xlaHloGraphPath)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._xlaHloDumpAsGraphdef)
        case 6: try decoder.decodeSingularStringField(value: &_storage._xlaLogHloText)
        case 7: try decoder.decodeSingularStringField(value: &_storage._xlaGenerateHloTextTo)
        case 8: try decoder.decodeSingularStringField(value: &_storage._xlaDumpOptimizedHloProtoTo)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._xlaHloProfile)
        case 10: try decoder.decodeSingularStringField(value: &_storage._xlaDumpComputationsTo)
        case 11: try decoder.decodeSingularStringField(value: &_storage._xlaDumpExecutionsTo)
        case 30: try decoder.decodeRepeatedStringField(value: &_storage._xlaDisableHloPasses)
        case 31: try decoder.decodeSingularInt32Field(value: &_storage._xlaBackendOptimizationLevel)
        case 33: try decoder.decodeSingularBoolField(value: &_storage._xlaEmbedIrInExecutable)
        case 34: try decoder.decodeSingularStringField(value: &_storage._xlaDumpIrTo)
        case 35: try decoder.decodeSingularBoolField(value: &_storage._xlaEliminateHloImplicitBroadcast)
        case 60: try decoder.decodeSingularBoolField(value: &_storage._xlaCpuMultiThreadEigen)
        case 61: try decoder.decodeSingularStringField(value: &_storage._xlaGpuCudaDataDir)
        case 62: try decoder.decodeSingularBoolField(value: &_storage._xlaGpuFtz)
        case 63: try decoder.decodeSingularBoolField(value: &_storage._xlaGpuDisableMultiStreaming)
        case 70: try decoder.decodeSingularBoolField(value: &_storage._xlaLlvmEnableAliasScopeMetadata)
        case 71: try decoder.decodeSingularBoolField(value: &_storage._xlaLlvmEnableNoaliasMetadata)
        case 72: try decoder.decodeSingularBoolField(value: &_storage._xlaLlvmEnableInvariantLoadMetadata)
        case 73: try decoder.decodeSingularBoolField(value: &_storage._xlaLlvmDisableExpensivePasses)
        case 80: try decoder.decodeRepeatedMessageField(value: &_storage._hloReducePrecisionOptions)
        case 90: try decoder.decodeSingularBoolField(value: &_storage._xlaTestAllOutputLayouts)
        case 91: try decoder.decodeSingularBoolField(value: &_storage._xlaTestAllInputLayouts)
        case 92: try decoder.decodeSingularBoolField(value: &_storage._xlaHloGraphShardingColor)
        case 93: try decoder.decodeSingularBoolField(value: &_storage._xlaHloTfgraphDeviceScopes)
        case 94: try decoder.decodeSingularBoolField(value: &_storage._xlaGpuUseCudnnBatchnorm)
        case 95: try decoder.decodeSingularStringField(value: &_storage._xlaDumpUnoptimizedHloProtoTo)
        case 96: try decoder.decodeSingularStringField(value: &_storage._xlaDumpPerPassHloProtoTo)
        case 97: try decoder.decodeSingularBoolField(value: &_storage._xlaCpuUseMklDnn)
        case 98: try decoder.decodeSingularInt32Field(value: &_storage._xlaGpuMaxKernelUnrollFactor)
        case 99: try decoder.decodeSingularBoolField(value: &_storage._xlaCpuEnableFastMath)
        case 100: try decoder.decodeSingularBoolField(value: &_storage._xlaGpuEnableFastMinMax)
        case 101: try decoder.decodeSingularBoolField(value: &_storage._xlaGpuCrashOnVerificationFailures)
        case 102: try decoder.decodeSingularInt32Field(value: &_storage._xlaForceHostPlatformDeviceCount)
        case 103: try decoder.decodeSingularBoolField(value: &_storage._xlaGpuDisablePtxasOptimizations)
        case 104: try decoder.decodeSingularBoolField(value: &_storage._xlaDisableAllHloPasses)
        case 105: try decoder.decodeSingularBoolField(value: &_storage._xlaHloDumpAsHtml)
        case 106: try decoder.decodeSingularBoolField(value: &_storage._xlaHloEvaluatorUseFastPath)
        case 107: try decoder.decodeSingularBoolField(value: &_storage._xlaAllowScalarIndexDynamicOps)
        case 500: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._xlaBackendExtraOptions)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._xlaGenerateHloGraph.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaGenerateHloGraph, fieldNumber: 1)
      }
      if _storage._xlaHloGraphAddresses != false {
        try visitor.visitSingularBoolField(value: _storage._xlaHloGraphAddresses, fieldNumber: 2)
      }
      if !_storage._xlaHloGraphPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaHloGraphPath, fieldNumber: 4)
      }
      if _storage._xlaHloDumpAsGraphdef != false {
        try visitor.visitSingularBoolField(value: _storage._xlaHloDumpAsGraphdef, fieldNumber: 5)
      }
      if !_storage._xlaLogHloText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaLogHloText, fieldNumber: 6)
      }
      if !_storage._xlaGenerateHloTextTo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaGenerateHloTextTo, fieldNumber: 7)
      }
      if !_storage._xlaDumpOptimizedHloProtoTo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaDumpOptimizedHloProtoTo, fieldNumber: 8)
      }
      if _storage._xlaHloProfile != false {
        try visitor.visitSingularBoolField(value: _storage._xlaHloProfile, fieldNumber: 9)
      }
      if !_storage._xlaDumpComputationsTo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaDumpComputationsTo, fieldNumber: 10)
      }
      if !_storage._xlaDumpExecutionsTo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaDumpExecutionsTo, fieldNumber: 11)
      }
      if !_storage._xlaDisableHloPasses.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._xlaDisableHloPasses, fieldNumber: 30)
      }
      if _storage._xlaBackendOptimizationLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._xlaBackendOptimizationLevel, fieldNumber: 31)
      }
      if _storage._xlaEmbedIrInExecutable != false {
        try visitor.visitSingularBoolField(value: _storage._xlaEmbedIrInExecutable, fieldNumber: 33)
      }
      if !_storage._xlaDumpIrTo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaDumpIrTo, fieldNumber: 34)
      }
      if _storage._xlaEliminateHloImplicitBroadcast != false {
        try visitor.visitSingularBoolField(value: _storage._xlaEliminateHloImplicitBroadcast, fieldNumber: 35)
      }
      if _storage._xlaCpuMultiThreadEigen != false {
        try visitor.visitSingularBoolField(value: _storage._xlaCpuMultiThreadEigen, fieldNumber: 60)
      }
      if !_storage._xlaGpuCudaDataDir.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaGpuCudaDataDir, fieldNumber: 61)
      }
      if _storage._xlaGpuFtz != false {
        try visitor.visitSingularBoolField(value: _storage._xlaGpuFtz, fieldNumber: 62)
      }
      if _storage._xlaGpuDisableMultiStreaming != false {
        try visitor.visitSingularBoolField(value: _storage._xlaGpuDisableMultiStreaming, fieldNumber: 63)
      }
      if _storage._xlaLlvmEnableAliasScopeMetadata != false {
        try visitor.visitSingularBoolField(value: _storage._xlaLlvmEnableAliasScopeMetadata, fieldNumber: 70)
      }
      if _storage._xlaLlvmEnableNoaliasMetadata != false {
        try visitor.visitSingularBoolField(value: _storage._xlaLlvmEnableNoaliasMetadata, fieldNumber: 71)
      }
      if _storage._xlaLlvmEnableInvariantLoadMetadata != false {
        try visitor.visitSingularBoolField(value: _storage._xlaLlvmEnableInvariantLoadMetadata, fieldNumber: 72)
      }
      if _storage._xlaLlvmDisableExpensivePasses != false {
        try visitor.visitSingularBoolField(value: _storage._xlaLlvmDisableExpensivePasses, fieldNumber: 73)
      }
      if !_storage._hloReducePrecisionOptions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._hloReducePrecisionOptions, fieldNumber: 80)
      }
      if _storage._xlaTestAllOutputLayouts != false {
        try visitor.visitSingularBoolField(value: _storage._xlaTestAllOutputLayouts, fieldNumber: 90)
      }
      if _storage._xlaTestAllInputLayouts != false {
        try visitor.visitSingularBoolField(value: _storage._xlaTestAllInputLayouts, fieldNumber: 91)
      }
      if _storage._xlaHloGraphShardingColor != false {
        try visitor.visitSingularBoolField(value: _storage._xlaHloGraphShardingColor, fieldNumber: 92)
      }
      if _storage._xlaHloTfgraphDeviceScopes != false {
        try visitor.visitSingularBoolField(value: _storage._xlaHloTfgraphDeviceScopes, fieldNumber: 93)
      }
      if _storage._xlaGpuUseCudnnBatchnorm != false {
        try visitor.visitSingularBoolField(value: _storage._xlaGpuUseCudnnBatchnorm, fieldNumber: 94)
      }
      if !_storage._xlaDumpUnoptimizedHloProtoTo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaDumpUnoptimizedHloProtoTo, fieldNumber: 95)
      }
      if !_storage._xlaDumpPerPassHloProtoTo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xlaDumpPerPassHloProtoTo, fieldNumber: 96)
      }
      if _storage._xlaCpuUseMklDnn != false {
        try visitor.visitSingularBoolField(value: _storage._xlaCpuUseMklDnn, fieldNumber: 97)
      }
      if _storage._xlaGpuMaxKernelUnrollFactor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._xlaGpuMaxKernelUnrollFactor, fieldNumber: 98)
      }
      if _storage._xlaCpuEnableFastMath != false {
        try visitor.visitSingularBoolField(value: _storage._xlaCpuEnableFastMath, fieldNumber: 99)
      }
      if _storage._xlaGpuEnableFastMinMax != false {
        try visitor.visitSingularBoolField(value: _storage._xlaGpuEnableFastMinMax, fieldNumber: 100)
      }
      if _storage._xlaGpuCrashOnVerificationFailures != false {
        try visitor.visitSingularBoolField(value: _storage._xlaGpuCrashOnVerificationFailures, fieldNumber: 101)
      }
      if _storage._xlaForceHostPlatformDeviceCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._xlaForceHostPlatformDeviceCount, fieldNumber: 102)
      }
      if _storage._xlaGpuDisablePtxasOptimizations != false {
        try visitor.visitSingularBoolField(value: _storage._xlaGpuDisablePtxasOptimizations, fieldNumber: 103)
      }
      if _storage._xlaDisableAllHloPasses != false {
        try visitor.visitSingularBoolField(value: _storage._xlaDisableAllHloPasses, fieldNumber: 104)
      }
      if _storage._xlaHloDumpAsHtml != false {
        try visitor.visitSingularBoolField(value: _storage._xlaHloDumpAsHtml, fieldNumber: 105)
      }
      if _storage._xlaHloEvaluatorUseFastPath != false {
        try visitor.visitSingularBoolField(value: _storage._xlaHloEvaluatorUseFastPath, fieldNumber: 106)
      }
      if _storage._xlaAllowScalarIndexDynamicOps != false {
        try visitor.visitSingularBoolField(value: _storage._xlaAllowScalarIndexDynamicOps, fieldNumber: 107)
      }
      if !_storage._xlaBackendExtraOptions.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._xlaBackendExtraOptions, fieldNumber: 500)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_DebugOptions, rhs: Xla_DebugOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._xlaGenerateHloGraph != rhs_storage._xlaGenerateHloGraph {return false}
        if _storage._xlaHloGraphAddresses != rhs_storage._xlaHloGraphAddresses {return false}
        if _storage._xlaHloGraphPath != rhs_storage._xlaHloGraphPath {return false}
        if _storage._xlaHloDumpAsGraphdef != rhs_storage._xlaHloDumpAsGraphdef {return false}
        if _storage._xlaLogHloText != rhs_storage._xlaLogHloText {return false}
        if _storage._xlaGenerateHloTextTo != rhs_storage._xlaGenerateHloTextTo {return false}
        if _storage._xlaDumpOptimizedHloProtoTo != rhs_storage._xlaDumpOptimizedHloProtoTo {return false}
        if _storage._xlaHloProfile != rhs_storage._xlaHloProfile {return false}
        if _storage._xlaDumpComputationsTo != rhs_storage._xlaDumpComputationsTo {return false}
        if _storage._xlaDumpExecutionsTo != rhs_storage._xlaDumpExecutionsTo {return false}
        if _storage._xlaDisableHloPasses != rhs_storage._xlaDisableHloPasses {return false}
        if _storage._xlaDisableAllHloPasses != rhs_storage._xlaDisableAllHloPasses {return false}
        if _storage._xlaBackendOptimizationLevel != rhs_storage._xlaBackendOptimizationLevel {return false}
        if _storage._xlaEmbedIrInExecutable != rhs_storage._xlaEmbedIrInExecutable {return false}
        if _storage._xlaDumpIrTo != rhs_storage._xlaDumpIrTo {return false}
        if _storage._xlaEliminateHloImplicitBroadcast != rhs_storage._xlaEliminateHloImplicitBroadcast {return false}
        if _storage._xlaCpuMultiThreadEigen != rhs_storage._xlaCpuMultiThreadEigen {return false}
        if _storage._xlaGpuCudaDataDir != rhs_storage._xlaGpuCudaDataDir {return false}
        if _storage._xlaGpuFtz != rhs_storage._xlaGpuFtz {return false}
        if _storage._xlaGpuDisableMultiStreaming != rhs_storage._xlaGpuDisableMultiStreaming {return false}
        if _storage._xlaLlvmEnableAliasScopeMetadata != rhs_storage._xlaLlvmEnableAliasScopeMetadata {return false}
        if _storage._xlaLlvmEnableNoaliasMetadata != rhs_storage._xlaLlvmEnableNoaliasMetadata {return false}
        if _storage._xlaLlvmEnableInvariantLoadMetadata != rhs_storage._xlaLlvmEnableInvariantLoadMetadata {return false}
        if _storage._xlaLlvmDisableExpensivePasses != rhs_storage._xlaLlvmDisableExpensivePasses {return false}
        if _storage._hloReducePrecisionOptions != rhs_storage._hloReducePrecisionOptions {return false}
        if _storage._xlaTestAllOutputLayouts != rhs_storage._xlaTestAllOutputLayouts {return false}
        if _storage._xlaTestAllInputLayouts != rhs_storage._xlaTestAllInputLayouts {return false}
        if _storage._xlaHloGraphShardingColor != rhs_storage._xlaHloGraphShardingColor {return false}
        if _storage._xlaHloTfgraphDeviceScopes != rhs_storage._xlaHloTfgraphDeviceScopes {return false}
        if _storage._xlaGpuUseCudnnBatchnorm != rhs_storage._xlaGpuUseCudnnBatchnorm {return false}
        if _storage._xlaDumpUnoptimizedHloProtoTo != rhs_storage._xlaDumpUnoptimizedHloProtoTo {return false}
        if _storage._xlaDumpPerPassHloProtoTo != rhs_storage._xlaDumpPerPassHloProtoTo {return false}
        if _storage._xlaCpuUseMklDnn != rhs_storage._xlaCpuUseMklDnn {return false}
        if _storage._xlaGpuMaxKernelUnrollFactor != rhs_storage._xlaGpuMaxKernelUnrollFactor {return false}
        if _storage._xlaCpuEnableFastMath != rhs_storage._xlaCpuEnableFastMath {return false}
        if _storage._xlaGpuEnableFastMinMax != rhs_storage._xlaGpuEnableFastMinMax {return false}
        if _storage._xlaGpuCrashOnVerificationFailures != rhs_storage._xlaGpuCrashOnVerificationFailures {return false}
        if _storage._xlaForceHostPlatformDeviceCount != rhs_storage._xlaForceHostPlatformDeviceCount {return false}
        if _storage._xlaGpuDisablePtxasOptimizations != rhs_storage._xlaGpuDisablePtxasOptimizations {return false}
        if _storage._xlaHloDumpAsHtml != rhs_storage._xlaHloDumpAsHtml {return false}
        if _storage._xlaHloEvaluatorUseFastPath != rhs_storage._xlaHloEvaluatorUseFastPath {return false}
        if _storage._xlaAllowScalarIndexDynamicOps != rhs_storage._xlaAllowScalarIndexDynamicOps {return false}
        if _storage._xlaBackendExtraOptions != rhs_storage._xlaBackendExtraOptions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ExecutionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecutionOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "shape_with_output_layout"),
    3: .same(proto: "seed"),
    4: .standard(proto: "debug_options"),
    5: .standard(proto: "device_handles"),
  ]

  fileprivate class _StorageClass {
    var _shapeWithOutputLayout: Xla_ShapeProto? = nil
    var _seed: UInt64 = 0
    var _debugOptions: Xla_DebugOptions? = nil
    var _deviceHandles: [Xla_DeviceHandle] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _shapeWithOutputLayout = source._shapeWithOutputLayout
      _seed = source._seed
      _debugOptions = source._debugOptions
      _deviceHandles = source._deviceHandles
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shapeWithOutputLayout)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._seed)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._debugOptions)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._deviceHandles)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._shapeWithOutputLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._seed != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._seed, fieldNumber: 3)
      }
      if let v = _storage._debugOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._deviceHandles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._deviceHandles, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ExecutionOptions, rhs: Xla_ExecutionOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._shapeWithOutputLayout != rhs_storage._shapeWithOutputLayout {return false}
        if _storage._seed != rhs_storage._seed {return false}
        if _storage._debugOptions != rhs_storage._debugOptions {return false}
        if _storage._deviceHandles != rhs_storage._deviceHandles {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_GetDeviceHandlesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDeviceHandlesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.deviceCount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deviceCount != 0 {
      try visitor.visitSingularInt64Field(value: self.deviceCount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_GetDeviceHandlesRequest, rhs: Xla_GetDeviceHandlesRequest) -> Bool {
    if lhs.deviceCount != rhs.deviceCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_GetDeviceHandlesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDeviceHandlesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_handles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.deviceHandles)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceHandles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deviceHandles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_GetDeviceHandlesResponse, rhs: Xla_GetDeviceHandlesResponse) -> Bool {
    if lhs.deviceHandles != rhs.deviceHandles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferToClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "shape_with_layout"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil
    var _shapeWithLayout: Xla_ShapeProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _shapeWithLayout = source._shapeWithLayout
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shapeWithLayout)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._shapeWithLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferToClientRequest, rhs: Xla_TransferToClientRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        if _storage._shapeWithLayout != rhs_storage._shapeWithLayout {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferToClientResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_LiteralProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferToClientResponse, rhs: Xla_TransferToClientResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._literal != rhs_storage._literal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToServerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferToServerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
    2: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_LiteralProto? = nil
    var _deviceHandle: Xla_DeviceHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferToServerRequest, rhs: Xla_TransferToServerRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._literal != rhs_storage._literal {return false}
        if _storage._deviceHandle != rhs_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToServerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferToServerResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferToServerResponse, rhs: Xla_TransferToServerResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToInfeedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferToInfeedRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
    2: .standard(proto: "replica_id"),
    3: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_LiteralProto? = nil
    var _replicaID: Int64 = 0
    var _deviceHandle: Xla_DeviceHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
      _replicaID = source._replicaID
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._replicaID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._replicaID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._replicaID, fieldNumber: 2)
      }
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferToInfeedRequest, rhs: Xla_TransferToInfeedRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._literal != rhs_storage._literal {return false}
        if _storage._replicaID != rhs_storage._replicaID {return false}
        if _storage._deviceHandle != rhs_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferToInfeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferToInfeedResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferToInfeedResponse, rhs: Xla_TransferToInfeedResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferFromOutfeedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferFromOutfeedRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shape_with_layout"),
    2: .standard(proto: "replica_id"),
    3: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _shapeWithLayout: Xla_ShapeProto? = nil
    var _replicaID: Int64 = 0
    var _deviceHandle: Xla_DeviceHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _shapeWithLayout = source._shapeWithLayout
      _replicaID = source._replicaID
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._shapeWithLayout)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._replicaID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._shapeWithLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._replicaID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._replicaID, fieldNumber: 2)
      }
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferFromOutfeedRequest, rhs: Xla_TransferFromOutfeedRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._shapeWithLayout != rhs_storage._shapeWithLayout {return false}
        if _storage._replicaID != rhs_storage._replicaID {return false}
        if _storage._deviceHandle != rhs_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_TransferFromOutfeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferFromOutfeedResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_LiteralProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_TransferFromOutfeedResponse, rhs: Xla_TransferFromOutfeedResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._literal != rhs_storage._literal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ResetDeviceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResetDeviceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_handle"),
  ]

  fileprivate class _StorageClass {
    var _deviceHandle: Xla_DeviceHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _deviceHandle = source._deviceHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._deviceHandle)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._deviceHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ResetDeviceRequest, rhs: Xla_ResetDeviceRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._deviceHandle != rhs_storage._deviceHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ResetDeviceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResetDeviceResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ResetDeviceResponse, rhs: Xla_ResetDeviceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ComputationGraphStatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputationGraphStatsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .standard(proto: "debug_options"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_HloModuleProto? = nil
    var _debugOptions: Xla_DebugOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _debugOptions = source._debugOptions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._debugOptions)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._debugOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ComputationGraphStatsRequest, rhs: Xla_ComputationGraphStatsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._computation != rhs_storage._computation {return false}
        if _storage._debugOptions != rhs_storage._debugOptions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ComputationStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputationStatsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stats"),
  ]

  fileprivate class _StorageClass {
    var _stats: Xla_ComputationStats? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _stats = source._stats
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._stats)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._stats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ComputationStatsResponse, rhs: Xla_ComputationStatsResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._stats != rhs_storage._stats {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_CreateChannelHandleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateChannelHandleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.channelType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channelType != .invalid {
      try visitor.visitSingularEnumField(value: self.channelType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_CreateChannelHandleRequest, rhs: Xla_CreateChannelHandleRequest) -> Bool {
    if lhs.channelType != rhs.channelType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_CreateChannelHandleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateChannelHandleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
  ]

  fileprivate class _StorageClass {
    var _channel: Xla_ChannelHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channel = source._channel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._channel)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_CreateChannelHandleResponse, rhs: Xla_CreateChannelHandleResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._channel != rhs_storage._channel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_UnregisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnregisterRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_UnregisterRequest, rhs: Xla_UnregisterRequest) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_UnregisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnregisterResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_UnregisterResponse, rhs: Xla_UnregisterResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_CompileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .standard(proto: "execution_options"),
    3: .standard(proto: "input_shape_with_layout"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_HloModuleProto? = nil
    var _executionOptions: Xla_ExecutionOptions? = nil
    var _inputShapeWithLayout: [Xla_ShapeProto] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _executionOptions = source._executionOptions
      _inputShapeWithLayout = source._inputShapeWithLayout
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._executionOptions)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._inputShapeWithLayout)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._executionOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._inputShapeWithLayout.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputShapeWithLayout, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_CompileRequest, rhs: Xla_CompileRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._computation != rhs_storage._computation {return false}
        if _storage._executionOptions != rhs_storage._executionOptions {return false}
        if _storage._inputShapeWithLayout != rhs_storage._inputShapeWithLayout {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_CompileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompileResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "handle"),
  ]

  fileprivate class _StorageClass {
    var _handle: Xla_ExecutionHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _handle = source._handle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._handle)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_CompileResponse, rhs: Xla_CompileResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._handle != rhs_storage._handle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "handle"),
    2: .same(proto: "arguments"),
  ]

  fileprivate class _StorageClass {
    var _handle: Xla_ExecutionHandle? = nil
    var _arguments: [Xla_GlobalDataHandle] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _handle = source._handle
      _arguments = source._arguments
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._handle)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._arguments)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arguments, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ExecuteRequest, rhs: Xla_ExecuteRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._handle != rhs_storage._handle {return false}
        if _storage._arguments != rhs_storage._arguments {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteGraphRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteGraphRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .same(proto: "arguments"),
    3: .standard(proto: "execution_options"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_HloModuleProto? = nil
    var _arguments: [Xla_GlobalDataHandle] = []
    var _executionOptions: Xla_ExecutionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _arguments = source._arguments
      _executionOptions = source._executionOptions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._arguments)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._executionOptions)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arguments, fieldNumber: 2)
      }
      if let v = _storage._executionOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ExecuteGraphRequest, rhs: Xla_ExecuteGraphRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._computation != rhs_storage._computation {return false}
        if _storage._arguments != rhs_storage._arguments {return false}
        if _storage._executionOptions != rhs_storage._executionOptions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteGraphParallelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteGraphParallelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.requests)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ExecuteGraphParallelRequest, rhs: Xla_ExecuteGraphParallelRequest) -> Bool {
    if lhs.requests != rhs.requests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
    2: .same(proto: "profile"),
  ]

  fileprivate class _StorageClass {
    var _output: Xla_GlobalDataHandle? = nil
    var _profile: Xla_ExecutionProfile? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _output = source._output
      _profile = source._profile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._output)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._profile)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._output {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._profile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ExecuteResponse, rhs: Xla_ExecuteResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._output != rhs_storage._output {return false}
        if _storage._profile != rhs_storage._profile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ExecuteParallelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteParallelResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.responses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ExecuteParallelResponse, rhs: Xla_ExecuteParallelResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_WaitForExecutionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WaitForExecutionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "execution"),
  ]

  fileprivate class _StorageClass {
    var _execution: Xla_ExecutionHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _execution = source._execution
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._execution)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._execution {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_WaitForExecutionRequest, rhs: Xla_WaitForExecutionRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._execution != rhs_storage._execution {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_WaitForExecutionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WaitForExecutionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
    2: .same(proto: "profile"),
  ]

  fileprivate class _StorageClass {
    var _output: Xla_GlobalDataHandle? = nil
    var _profile: Xla_ExecutionProfile? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _output = source._output
      _profile = source._profile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._output)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._profile)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._output {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._profile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_WaitForExecutionResponse, rhs: Xla_WaitForExecutionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._output != rhs_storage._output {return false}
        if _storage._profile != rhs_storage._profile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ComputeConstantGraphRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputeConstantGraphRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "computation"),
    2: .standard(proto: "output_layout"),
  ]

  fileprivate class _StorageClass {
    var _computation: Xla_HloModuleProto? = nil
    var _outputLayout: Xla_LayoutProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _computation = source._computation
      _outputLayout = source._outputLayout
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._computation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._outputLayout)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._computation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._outputLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ComputeConstantGraphRequest, rhs: Xla_ComputeConstantGraphRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._computation != rhs_storage._computation {return false}
        if _storage._outputLayout != rhs_storage._outputLayout {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_ComputeConstantResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ComputeConstantResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "literal"),
  ]

  fileprivate class _StorageClass {
    var _literal: Xla_LiteralProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _literal = source._literal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._literal)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._literal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_ComputeConstantResponse, rhs: Xla_ComputeConstantResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._literal != rhs_storage._literal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_DeconstructTupleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeconstructTupleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "tuple_handle"),
  ]

  fileprivate class _StorageClass {
    var _tupleHandle: Xla_GlobalDataHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tupleHandle = source._tupleHandle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tupleHandle)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tupleHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_DeconstructTupleRequest, rhs: Xla_DeconstructTupleRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tupleHandle != rhs_storage._tupleHandle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_DeconstructTupleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeconstructTupleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "element_handles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.elementHandles)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elementHandles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elementHandles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_DeconstructTupleResponse, rhs: Xla_DeconstructTupleResponse) -> Bool {
    if lhs.elementHandles != rhs.elementHandles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_LoadDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "columnio_tablet_path"),
    2: .standard(proto: "columnio_field"),
    3: .standard(proto: "element_shape"),
    4: .same(proto: "offset"),
    5: .same(proto: "limit"),
    6: .same(proto: "zip"),
  ]

  fileprivate class _StorageClass {
    var _columnioTabletPath: String = String()
    var _columnioField: String = String()
    var _elementShape: Xla_ShapeProto? = nil
    var _offset: Int64 = 0
    var _limit: Int64 = 0
    var _zip: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _columnioTabletPath = source._columnioTabletPath
      _columnioField = source._columnioField
      _elementShape = source._elementShape
      _offset = source._offset
      _limit = source._limit
      _zip = source._zip
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._columnioTabletPath)
        case 2: try decoder.decodeSingularStringField(value: &_storage._columnioField)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._elementShape)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._offset)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._limit)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._zip)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._columnioTabletPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._columnioTabletPath, fieldNumber: 1)
      }
      if !_storage._columnioField.isEmpty {
        try visitor.visitSingularStringField(value: _storage._columnioField, fieldNumber: 2)
      }
      if let v = _storage._elementShape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._offset, fieldNumber: 4)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._limit, fieldNumber: 5)
      }
      if _storage._zip != false {
        try visitor.visitSingularBoolField(value: _storage._zip, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_LoadDataRequest, rhs: Xla_LoadDataRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._columnioTabletPath != rhs_storage._columnioTabletPath {return false}
        if _storage._columnioField != rhs_storage._columnioField {return false}
        if _storage._elementShape != rhs_storage._elementShape {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._limit != rhs_storage._limit {return false}
        if _storage._zip != rhs_storage._zip {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_LoadDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadDataResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "data_shape"),
    3: .standard(proto: "available_rows"),
    4: .standard(proto: "rows_loaded"),
    5: .same(proto: "nanoseconds"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil
    var _dataShape: Xla_ShapeProto? = nil
    var _availableRows: Int64 = 0
    var _rowsLoaded: Int64 = 0
    var _nanoseconds: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
      _dataShape = source._dataShape
      _availableRows = source._availableRows
      _rowsLoaded = source._rowsLoaded
      _nanoseconds = source._nanoseconds
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._dataShape)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._availableRows)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._rowsLoaded)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._nanoseconds)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._dataShape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._availableRows != 0 {
        try visitor.visitSingularInt64Field(value: _storage._availableRows, fieldNumber: 3)
      }
      if _storage._rowsLoaded != 0 {
        try visitor.visitSingularInt64Field(value: _storage._rowsLoaded, fieldNumber: 4)
      }
      if _storage._nanoseconds != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nanoseconds, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_LoadDataResponse, rhs: Xla_LoadDataResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        if _storage._dataShape != rhs_storage._dataShape {return false}
        if _storage._availableRows != rhs_storage._availableRows {return false}
        if _storage._rowsLoaded != rhs_storage._rowsLoaded {return false}
        if _storage._nanoseconds != rhs_storage._nanoseconds {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_GetShapeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetShapeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_GetShapeRequest, rhs: Xla_GetShapeRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_GetShapeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetShapeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shape"),
  ]

  fileprivate class _StorageClass {
    var _shape: Xla_ShapeProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _shape = source._shape
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._shape)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._shape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_GetShapeResponse, rhs: Xla_GetShapeResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._shape != rhs_storage._shape {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_UnpackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnpackRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _data: Xla_GlobalDataHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_UnpackRequest, rhs: Xla_UnpackRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xla_UnpackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnpackResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tied_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tiedData)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tiedData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tiedData, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xla_UnpackResponse, rhs: Xla_UnpackResponse) -> Bool {
    if lhs.tiedData != rhs.tiedData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
