// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/makefile/downloads/protobuf/python/google/protobuf/pyext/python.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: tibell@google.com (Johan Tibell)
//
// These message definitions are used to exercises known corner cases
// in the C++ implementation of the Python API.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Google_Protobuf_Python_Internal_TestAllTypes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var repeatedNestedMessage: [Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  public var optionalNestedMessage: Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  public var hasOptionalNestedMessage: Bool {return _storage._optionalNestedMessage != nil}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  public mutating func clearOptionalNestedMessage() {_uniqueStorage()._optionalNestedMessage = nil}

  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  public var hasOptionalInt32: Bool {return _storage._optionalInt32 != nil}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  public mutating func clearOptionalInt32() {_uniqueStorage()._optionalInt32 = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct NestedMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bb: Int32 {
      get {return _storage._bb ?? 0}
      set {_uniqueStorage()._bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    public var hasBb: Bool {return _storage._bb != nil}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    public mutating func clearBb() {_uniqueStorage()._bb = nil}

    public var cc: Google_Protobuf_Python_Internal_ForeignMessage {
      get {return _storage._cc ?? Google_Protobuf_Python_Internal_ForeignMessage()}
      set {_uniqueStorage()._cc = newValue}
    }
    /// Returns true if `cc` has been explicitly set.
    public var hasCc: Bool {return _storage._cc != nil}
    /// Clears the value of `cc`. Subsequent reads from it will return its default value.
    public mutating func clearCc() {_uniqueStorage()._cc = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Google_Protobuf_Python_Internal_ForeignMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  public var hasC: Bool {return self._c != nil}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  public mutating func clearC() {self._c = nil}

  public var d: [Int32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _c: Int32? = nil
}

/// extension begin
public struct Google_Protobuf_Python_Internal_TestAllExtensions: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

// MARK: - Extension support defined in python.proto.

extension Google_Protobuf_Python_Internal_TestAllExtensions {

  public var Google_Protobuf_Python_Internal_optionalNestedMessageExtension: Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension) ?? Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension`
  /// has been explicitly set.
  public var hasGoogle_Protobuf_Python_Internal_optionalNestedMessageExtension: Bool {
    return hasExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension)
  }
  /// Clears the value of extension `Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGoogle_Protobuf_Python_Internal_optionalNestedMessageExtension() {
    clearExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension)
  }

  public var Google_Protobuf_Python_Internal_repeatedNestedMessageExtension: [Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension) ?? []}
    set {setExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension`
  /// has been explicitly set.
  public var hasGoogle_Protobuf_Python_Internal_repeatedNestedMessageExtension: Bool {
    return hasExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension)
  }
  /// Clears the value of extension `Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGoogle_Protobuf_Python_Internal_repeatedNestedMessageExtension() {
    clearExtensionValue(ext: Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension)
  }

}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Google_Protobuf_Python_Internal_Python_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension,
  Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension
]

let Google_Protobuf_Python_Internal_Extensions_optional_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage>, Google_Protobuf_Python_Internal_TestAllExtensions>(
  _protobuf_fieldNumber: 1,
  fieldName: "google.protobuf.python.internal.optional_nested_message_extension"
)

let Google_Protobuf_Python_Internal_Extensions_repeated_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage>, Google_Protobuf_Python_Internal_TestAllExtensions>(
  _protobuf_fieldNumber: 2,
  fieldName: "google.protobuf.python.internal.repeated_nested_message_extension"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.protobuf.python.internal"

extension Google_Protobuf_Python_Internal_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestAllTypes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "repeated_nested_message"),
    2: .standard(proto: "optional_nested_message"),
    3: .standard(proto: "optional_int32"),
  ]

  fileprivate class _StorageClass {
    var _repeatedNestedMessage: [Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage] = []
    var _optionalNestedMessage: Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage? = nil
    var _optionalInt32: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _repeatedNestedMessage = source._repeatedNestedMessage
      _optionalNestedMessage = source._optionalNestedMessage
      _optionalInt32 = source._optionalInt32
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 1)
      }
      if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Protobuf_Python_Internal_TestAllTypes, rhs: Google_Protobuf_Python_Internal_TestAllTypes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._repeatedNestedMessage != rhs_storage._repeatedNestedMessage {return false}
        if _storage._optionalNestedMessage != rhs_storage._optionalNestedMessage {return false}
        if _storage._optionalInt32 != rhs_storage._optionalInt32 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Protobuf_Python_Internal_TestAllTypes.protoMessageName + ".NestedMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
    2: .same(proto: "cc"),
  ]

  fileprivate class _StorageClass {
    var _bb: Int32? = nil
    var _cc: Google_Protobuf_Python_Internal_ForeignMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bb = source._bb
      _cc = source._cc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._bb)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._cc)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bb {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._cc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage, rhs: Google_Protobuf_Python_Internal_TestAllTypes.NestedMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bb != rhs_storage._bb {return false}
        if _storage._cc != rhs_storage._cc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Protobuf_Python_Internal_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ForeignMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
    2: .same(proto: "d"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._c)
      case 2: try decoder.decodeRepeatedInt32Field(value: &self.d)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._c {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if !self.d.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.d, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Protobuf_Python_Internal_ForeignMessage, rhs: Google_Protobuf_Python_Internal_ForeignMessage) -> Bool {
    if lhs._c != rhs._c {return false}
    if lhs.d != rhs.d {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Protobuf_Python_Internal_TestAllExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestAllExtensions"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Google_Protobuf_Python_Internal_TestAllExtensions.self, fieldNumber: fieldNumber)
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Protobuf_Python_Internal_TestAllExtensions, rhs: Google_Protobuf_Python_Internal_TestAllExtensions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}
