// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/node_def.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_NodeDef {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name given to this operator. Used for naming inputs,
  /// logging, visualization, etc.  Unique within a single GraphDef.
  /// Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// The operation name.  There may be custom parameters in attrs.
  /// Op names starting with an underscore are reserved for internal use.
  public var op: String {
    get {return _storage._op}
    set {_uniqueStorage()._op = newValue}
  }

  /// Each input is "node:src_output" with "node" being a string name and
  /// "src_output" indicating which output tensor to use from "node". If
  /// "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
  /// may optionally be followed by control inputs that have the format
  /// "^node".
  public var input: [String] {
    get {return _storage._input}
    set {_uniqueStorage()._input = newValue}
  }

  /// A (possibly partial) specification for the device on which this
  /// node should be placed.
  /// The expected syntax for this string is as follows:
  ///
  /// DEVICE_SPEC ::= PARTIAL_SPEC
  ///
  /// PARTIAL_SPEC ::= ("/" CONSTRAINT) *
  /// CONSTRAINT ::= ("job:" JOB_NAME)
  ///              | ("replica:" [1-9][0-9]*)
  ///              | ("task:" [1-9][0-9]*)
  ///              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
  ///
  /// Valid values for this string include:
  /// * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
  /// * "/job:worker/device:GPU:3"                   (partial specification)
  /// * ""                                    (no specification)
  ///
  /// If the constraints do not resolve to a single device (or if this
  /// field is empty or not present), the runtime will attempt to
  /// choose a device automatically.
  public var device: String {
    get {return _storage._device}
    set {_uniqueStorage()._device = newValue}
  }

  /// Operation-specific graph-construction-time configuration.
  /// Note that this should include all attrs defined in the
  /// corresponding OpDef, including those with a value matching
  /// the default -- this allows the default to change and makes
  /// NodeDefs easier to interpret on their own.  However, if
  /// an attr with a default is not specified in this list, the
  /// default will be used.
  /// The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
  /// one of the names from the corresponding OpDef's attr field).
  /// The values must have a type matching the corresponding OpDef
  /// attr's type field.
  /// TODO(josh11b): Add some examples here showing best practices.
  public var attr: Dictionary<String,Tensorflow_AttrValue> {
    get {return _storage._attr}
    set {_uniqueStorage()._attr = newValue}
  }

  /// This stores debug information associated with the node.
  public var experimentalDebugInfo: Tensorflow_NodeDef.ExperimentalDebugInfo {
    get {return _storage._experimentalDebugInfo ?? Tensorflow_NodeDef.ExperimentalDebugInfo()}
    set {_uniqueStorage()._experimentalDebugInfo = newValue}
  }
  /// Returns true if `experimentalDebugInfo` has been explicitly set.
  public var hasExperimentalDebugInfo: Bool {return _storage._experimentalDebugInfo != nil}
  /// Clears the value of `experimentalDebugInfo`. Subsequent reads from it will return its default value.
  public mutating func clearExperimentalDebugInfo() {_uniqueStorage()._experimentalDebugInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct ExperimentalDebugInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Opaque string inserted into error messages created by the runtime.
    ///
    /// This is intended to store the list of names of the nodes from the
    /// original graph that this node was derived. For example if this node, say
    /// C, was result of a fusion of 2 nodes A and B, then 'original_node' would
    /// be {A, B}. This information can be used to map errors originating at the
    /// current node to some top level source code.
    public var originalNodeNames: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_NodeDef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NodeDef"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "op"),
    3: .same(proto: "input"),
    4: .same(proto: "device"),
    5: .same(proto: "attr"),
    6: .standard(proto: "experimental_debug_info"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _op: String = String()
    var _input: [String] = []
    var _device: String = String()
    var _attr: Dictionary<String,Tensorflow_AttrValue> = [:]
    var _experimentalDebugInfo: Tensorflow_NodeDef.ExperimentalDebugInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _op = source._op
      _input = source._input
      _device = source._device
      _attr = source._attr
      _experimentalDebugInfo = source._experimentalDebugInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._op)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._input)
        case 4: try decoder.decodeSingularStringField(value: &_storage._device)
        case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_AttrValue>.self, value: &_storage._attr)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._experimentalDebugInfo)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._op.isEmpty {
        try visitor.visitSingularStringField(value: _storage._op, fieldNumber: 2)
      }
      if !_storage._input.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._input, fieldNumber: 3)
      }
      if !_storage._device.isEmpty {
        try visitor.visitSingularStringField(value: _storage._device, fieldNumber: 4)
      }
      if !_storage._attr.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_AttrValue>.self, value: _storage._attr, fieldNumber: 5)
      }
      if let v = _storage._experimentalDebugInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_NodeDef, rhs: Tensorflow_NodeDef) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._op != rhs_storage._op {return false}
        if _storage._input != rhs_storage._input {return false}
        if _storage._device != rhs_storage._device {return false}
        if _storage._attr != rhs_storage._attr {return false}
        if _storage._experimentalDebugInfo != rhs_storage._experimentalDebugInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_NodeDef.ExperimentalDebugInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tensorflow_NodeDef.protoMessageName + ".ExperimentalDebugInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_node_names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.originalNodeNames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.originalNodeNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.originalNodeNames, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_NodeDef.ExperimentalDebugInfo, rhs: Tensorflow_NodeDef.ExperimentalDebugInfo) -> Bool {
    if lhs.originalNodeNames != rhs.originalNodeNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
