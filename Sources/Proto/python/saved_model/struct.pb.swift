// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/python/saved_model/struct.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// `StructuredValue` represents a dynamically typed value representing various
/// data structures that are inspired by Python data structures typically used in
/// TensorFlow functions as inputs and outputs.
public struct Tensorflow_StructuredValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The kind of value.
  public var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  /// Represents None.
  public var noneValue: Tensorflow_NoneValue {
    get {
      if case .noneValue(let v)? = _storage._kind {return v}
      return Tensorflow_NoneValue()
    }
    set {_uniqueStorage()._kind = .noneValue(newValue)}
  }

  /// Represents a double-precision floating-point value (a Python `float`).
  public var float64Value: Double {
    get {
      if case .float64Value(let v)? = _storage._kind {return v}
      return 0
    }
    set {_uniqueStorage()._kind = .float64Value(newValue)}
  }

  /// Represents a signed integer value, limited to 64 bits.
  /// Larger values from Python's arbitrary-precision integers are unsupported.
  public var int64Value: Int64 {
    get {
      if case .int64Value(let v)? = _storage._kind {return v}
      return 0
    }
    set {_uniqueStorage()._kind = .int64Value(newValue)}
  }

  /// Represents a string of Unicode characters stored in a Python `str`.
  /// In Python 3, this is exactly what type `str` is.
  /// In Python 2, this is the UTF-8 encoding of the characters.
  /// For strings with ASCII characters only (as often used in TensorFlow code)
  /// there is effectively no difference between the language versions.
  /// The obsolescent `unicode` type of Python 2 is not supported here.
  public var stringValue: String {
    get {
      if case .stringValue(let v)? = _storage._kind {return v}
      return String()
    }
    set {_uniqueStorage()._kind = .stringValue(newValue)}
  }

  /// Represents a boolean value.
  public var boolValue: Bool {
    get {
      if case .boolValue(let v)? = _storage._kind {return v}
      return false
    }
    set {_uniqueStorage()._kind = .boolValue(newValue)}
  }

  /// Represents a tf.TensorShape.
  public var tensorShapeValue: Tensorflow_TensorShapeProto {
    get {
      if case .tensorShapeValue(let v)? = _storage._kind {return v}
      return Tensorflow_TensorShapeProto()
    }
    set {_uniqueStorage()._kind = .tensorShapeValue(newValue)}
  }

  /// Represents an enum value for tf.DType.
  public var tensorDtypeValue: Tensorflow_DataType {
    get {
      if case .tensorDtypeValue(let v)? = _storage._kind {return v}
      return .dtInvalid
    }
    set {_uniqueStorage()._kind = .tensorDtypeValue(newValue)}
  }

  /// Represents a value for tf.TensorShape.
  public var tensorSpecValue: Tensorflow_TensorSpecProto {
    get {
      if case .tensorSpecValue(let v)? = _storage._kind {return v}
      return Tensorflow_TensorSpecProto()
    }
    set {_uniqueStorage()._kind = .tensorSpecValue(newValue)}
  }

  /// Represents a list of `Value`.
  public var listValue: Tensorflow_ListValue {
    get {
      if case .listValue(let v)? = _storage._kind {return v}
      return Tensorflow_ListValue()
    }
    set {_uniqueStorage()._kind = .listValue(newValue)}
  }

  /// Represents a tuple of `Value`.
  public var tupleValue: Tensorflow_TupleValue {
    get {
      if case .tupleValue(let v)? = _storage._kind {return v}
      return Tensorflow_TupleValue()
    }
    set {_uniqueStorage()._kind = .tupleValue(newValue)}
  }

  /// Represents a dict `Value`.
  public var dictValue: Tensorflow_DictValue {
    get {
      if case .dictValue(let v)? = _storage._kind {return v}
      return Tensorflow_DictValue()
    }
    set {_uniqueStorage()._kind = .dictValue(newValue)}
  }

  /// Represents Python's namedtuple.
  public var namedTupleValue: Tensorflow_NamedTupleValue {
    get {
      if case .namedTupleValue(let v)? = _storage._kind {return v}
      return Tensorflow_NamedTupleValue()
    }
    set {_uniqueStorage()._kind = .namedTupleValue(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The kind of value.
  public enum OneOf_Kind: Equatable {
    /// Represents None.
    case noneValue(Tensorflow_NoneValue)
    /// Represents a double-precision floating-point value (a Python `float`).
    case float64Value(Double)
    /// Represents a signed integer value, limited to 64 bits.
    /// Larger values from Python's arbitrary-precision integers are unsupported.
    case int64Value(Int64)
    /// Represents a string of Unicode characters stored in a Python `str`.
    /// In Python 3, this is exactly what type `str` is.
    /// In Python 2, this is the UTF-8 encoding of the characters.
    /// For strings with ASCII characters only (as often used in TensorFlow code)
    /// there is effectively no difference between the language versions.
    /// The obsolescent `unicode` type of Python 2 is not supported here.
    case stringValue(String)
    /// Represents a boolean value.
    case boolValue(Bool)
    /// Represents a tf.TensorShape.
    case tensorShapeValue(Tensorflow_TensorShapeProto)
    /// Represents an enum value for tf.DType.
    case tensorDtypeValue(Tensorflow_DataType)
    /// Represents a value for tf.TensorShape.
    case tensorSpecValue(Tensorflow_TensorSpecProto)
    /// Represents a list of `Value`.
    case listValue(Tensorflow_ListValue)
    /// Represents a tuple of `Value`.
    case tupleValue(Tensorflow_TupleValue)
    /// Represents a dict `Value`.
    case dictValue(Tensorflow_DictValue)
    /// Represents Python's namedtuple.
    case namedTupleValue(Tensorflow_NamedTupleValue)

  #if !swift(>=4.1)
    public static func ==(lhs: Tensorflow_StructuredValue.OneOf_Kind, rhs: Tensorflow_StructuredValue.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.noneValue(let l), .noneValue(let r)): return l == r
      case (.float64Value(let l), .float64Value(let r)): return l == r
      case (.int64Value(let l), .int64Value(let r)): return l == r
      case (.stringValue(let l), .stringValue(let r)): return l == r
      case (.boolValue(let l), .boolValue(let r)): return l == r
      case (.tensorShapeValue(let l), .tensorShapeValue(let r)): return l == r
      case (.tensorDtypeValue(let l), .tensorDtypeValue(let r)): return l == r
      case (.tensorSpecValue(let l), .tensorSpecValue(let r)): return l == r
      case (.listValue(let l), .listValue(let r)): return l == r
      case (.tupleValue(let l), .tupleValue(let r)): return l == r
      case (.dictValue(let l), .dictValue(let r)): return l == r
      case (.namedTupleValue(let l), .namedTupleValue(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents None.
public struct Tensorflow_NoneValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents a Python list.
public struct Tensorflow_ListValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var values: [Tensorflow_StructuredValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents a Python tuple.
public struct Tensorflow_TupleValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var values: [Tensorflow_StructuredValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents a Python dict keyed by `str`.
/// The comment on Unicode from Value.string_value applies analogously.
public struct Tensorflow_DictValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fields: Dictionary<String,Tensorflow_StructuredValue> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents a (key, value) pair.
public struct Tensorflow_PairValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: String {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  public var value: Tensorflow_StructuredValue {
    get {return _storage._value ?? Tensorflow_StructuredValue()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_uniqueStorage()._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents Python's namedtuple.
public struct Tensorflow_NamedTupleValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var values: [Tensorflow_PairValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A protobuf to tf.TensorSpec.
public struct Tensorflow_TensorSpecProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var shape: Tensorflow_TensorShapeProto {
    get {return _storage._shape ?? Tensorflow_TensorShapeProto()}
    set {_uniqueStorage()._shape = newValue}
  }
  /// Returns true if `shape` has been explicitly set.
  public var hasShape: Bool {return _storage._shape != nil}
  /// Clears the value of `shape`. Subsequent reads from it will return its default value.
  public mutating func clearShape() {_uniqueStorage()._shape = nil}

  public var dtype: Tensorflow_DataType {
    get {return _storage._dtype}
    set {_uniqueStorage()._dtype = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_StructuredValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StructuredValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "none_value"),
    11: .standard(proto: "float64_value"),
    12: .standard(proto: "int64_value"),
    13: .standard(proto: "string_value"),
    14: .standard(proto: "bool_value"),
    31: .standard(proto: "tensor_shape_value"),
    32: .standard(proto: "tensor_dtype_value"),
    33: .standard(proto: "tensor_spec_value"),
    51: .standard(proto: "list_value"),
    52: .standard(proto: "tuple_value"),
    53: .standard(proto: "dict_value"),
    54: .standard(proto: "named_tuple_value"),
  ]

  fileprivate class _StorageClass {
    var _kind: Tensorflow_StructuredValue.OneOf_Kind?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _kind = source._kind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Tensorflow_NoneValue?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .noneValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .noneValue(v)}
        case 11:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._kind = .float64Value(v)}
        case 12:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularSInt64Field(value: &v)
          if let v = v {_storage._kind = .int64Value(v)}
        case 13:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._kind = .stringValue(v)}
        case 14:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._kind = .boolValue(v)}
        case 31:
          var v: Tensorflow_TensorShapeProto?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .tensorShapeValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .tensorShapeValue(v)}
        case 32:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Tensorflow_DataType?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._kind = .tensorDtypeValue(v)}
        case 33:
          var v: Tensorflow_TensorSpecProto?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .tensorSpecValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .tensorSpecValue(v)}
        case 51:
          var v: Tensorflow_ListValue?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .listValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .listValue(v)}
        case 52:
          var v: Tensorflow_TupleValue?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .tupleValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .tupleValue(v)}
        case 53:
          var v: Tensorflow_DictValue?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .dictValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .dictValue(v)}
        case 54:
          var v: Tensorflow_NamedTupleValue?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .namedTupleValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .namedTupleValue(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._kind {
      case .noneValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .float64Value(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      case .int64Value(let v)?:
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 12)
      case .stringValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      case .boolValue(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      case .tensorShapeValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      case .tensorDtypeValue(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 32)
      case .tensorSpecValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      case .listValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      case .tupleValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
      case .dictValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      case .namedTupleValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_StructuredValue, rhs: Tensorflow_StructuredValue) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._kind != rhs_storage._kind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_NoneValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NoneValue"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_NoneValue, rhs: Tensorflow_NoneValue) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_ListValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.values)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_ListValue, rhs: Tensorflow_ListValue) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_TupleValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TupleValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.values)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_TupleValue, rhs: Tensorflow_TupleValue) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_DictValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DictValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_StructuredValue>.self, value: &self.fields)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fields.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_StructuredValue>.self, value: self.fields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_DictValue, rhs: Tensorflow_DictValue) -> Bool {
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_PairValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PairValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _key: String = String()
    var _value: Tensorflow_StructuredValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._key.isEmpty {
        try visitor.visitSingularStringField(value: _storage._key, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_PairValue, rhs: Tensorflow_PairValue) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_NamedTupleValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NamedTupleValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.values)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_NamedTupleValue, rhs: Tensorflow_NamedTupleValue) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tensorflow_TensorSpecProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TensorSpecProto"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "shape"),
    3: .same(proto: "dtype"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _shape: Tensorflow_TensorShapeProto? = nil
    var _dtype: Tensorflow_DataType = .dtInvalid

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _shape = source._shape
      _dtype = source._dtype
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shape)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._dtype)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._shape {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._dtype != .dtInvalid {
        try visitor.visitSingularEnumField(value: _storage._dtype, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tensorflow_TensorSpecProto, rhs: Tensorflow_TensorSpecProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._shape != rhs_storage._shape {return false}
        if _storage._dtype != rhs_storage._dtype {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
